{"version":3,"sources":["components/Header.js","components/AboutContents.js","components/HowtoContents.js","components/Disclaimer.js","components/HelpToolContent.js","components/HelpToolPopover.js","components/FrontText.js","components/VarSelect.js","components/DateSelect.js","components/LoadForecastDates.js","components/LoadLonLatGrid.js","components/LoadPointForecast.js","components/MapLegend.js","components/MapDisplay.js","components/PointDisplay/dbchart.js","components/PointDisplay/dbdates.js","components/PointDisplay/dblegend.js","components/PointDisplay/dbtable.js","components/PointDisplay/dblocation.js","components/PointDisplay/dbsummary.js","components/PointDisplay/dbassumptions.js","components/PointDisplay/dbtitle.js","components/PointDisplay/PointDisplay.js","components/ToolContents.js","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","getActiveTabIndex","props","history","location","pathname","handleChange","event","value","push","handleChangeIndex","index","setState","classes","this","className","root","AppBar","position","color","Toolbar","titleLong","onClick","Typography","variant","headerText","subHeaderText","titleShort","rightToolbar","Tabs","onChange","indicatorColor","textColor","Tab","tab","label","bottomToolbar","React","Component","withRouter","withStyles","theme","display","appBar","marginLeft","minWidth","width","blue","fontSize","fontWeight","marginBottom","marginRight","breakpoints","down","up","cursor","toolbar","mixins","AboutContents","state","Grid","container","spacing","item","sm","md","component","align","paragraph","aboutHeaderText","href","flexGrow","control","padding","HowtoContents","howtoHeaderText","style","Divider","howtoHeaderTextSub","fontStyle","Disclaimer","DisclaimerText","HelpToolLocation","Box","maxWidth","border","borderRadius","borderColor","bgcolor","HelpToolFcst72hr","HelpToolFcstDetails","HelpToolMap","HelpToolMapFineTuneSelection","HelpToolPopover","anchorEl","handleClick","currentTarget","handleClose","open","Boolean","IconButton","aria-label","menuButton","Popover","id","onClose","anchorOrigin","vertical","horizontal","transformOrigin","content","typography","margin","marginTop","flexWrap","direction","justify","xs","lg","gutterBottom","Hidden","smDown","getLabel","v","formControl","autoComplete","FormControl","InputLabel","htmlFor","Select","onchange","inputProps","name","values","map","i","MenuItem","valuetext","marks","valuesEndRange","length","valuesStartRange","x","ReactHtmlParser","slice","Slider","track","indexOf","valueLabelDisplay","min","max","aria-labelledby","getAriaValueText","LoadForecastDates","dateFcstInit","fetch","public_url","then","r","json","data","propTypes","PropTypes","string","isRequired","LoadLonLatGrid","LoadPointForecast","idxLon","idxLat","mapLegendStyle","bottom","left","MapLegend","variable","includes","mapboxgl","workerClass","require","default","TOKEN","navStyle","top","geocoderStyle","MapDisplay","geocoderContainerRef","createRef","mapRef","handleGeocoderViewportChange","viewport","viewport_updated","transitionDuration","handlePointChange","latitude","longitude","handleViewportChange","handleMapClick","e","handleSelectionConfirmed","lngLat","zoom","handleSaveLocation","mapStyle","imgsrc","imgcoords","mapStyleSatellite","onChangeClick","initLocation","date","prevProps","idxLocationTextEnd","locationText","ref","zIndex","height","mapboxApiAccessToken","onViewportChange","selectionConfirmed","containerRef","placeholder","proximity","clearOnBlur","countries","onResult","handleGeocoderLocationChange","showCompass","lon","lat","closeButton","closeOnClick","captureClick","anchor","Button","size","alignItems","toFixed","HighchartsMore","Highcharts","ThreatColumnChart","defaults","dbchart","colors","zones","dbtable","columns","labels","risk","dbthumbs","count","start","data_model","dashboard","chart","Object","assign","seriesName","table","description","createRiskCategories","perc_array","convertRiskPercToRiskCat","p","cat","model_data","model_dates","season","start_date","startDate","firstValid","zone","toString","borderWidth","alignTicks","renderTo","legend","enabled","navigator","handles","series","type","yAxis","plotOptions","pointStart","pointInterval","rangeSelector","selected","inputEnabled","buttonTheme","visibility","labelStyle","scrollbar","colorByPoint","dataLabels","inside","formatter","y","zoneAxis","title","text","subtitle","tooltip","xAxis","dateTimeLabelFormats","day","week","month","year","events","afterSetExtremes","charts","forEach","setExtremes","updateExtremes","tickInterval","datastore","pointData","parseInt","moment","startOf","dataForZones","dailyExtremeTemp","highcharts","constructorType","options","genChartConfig","spacingTop","verticalAlign","itemStyle","showInNavigator","lineWidth","plotLines","dashStyle","DashboardDates","today_date","format","first_valid","fcast_idx","indexes","entries","idx","key_str","the_date","add","DashboardLegend","class_str","DailyDataComponent","riskData","risk_categories","ThreatDashboardTable","cellPadding","cellSpacing","DashboardLocation","idxTitleEnd","titleText","parseFloat","button","DashboardSummary","c","d","txtRisk","summaryObj","today_idx","today_p","fcast_dates","convertRiskCatToText","red","DashboardAssumptions","userSnow","userSoilFzn","DashboardTitle","PointDisplay","detailView","assumptionsView","nextProps","window","innerWidth","userSnowChange","userSoilFznChange","updateAssumptionsView","getAssumptionsButtonText","updateDetailView","getDetailsButtonText","ToolContents","ls","remove","initViewport","lt","ln","set","handleDateChange","newValue","dates","handleVarChange","target","handleChangeUserSnow","handleChangeUserSoilFzn","handleDetailViewChange","prevState","handleAssumptionsViewChange","result","place_name","b","handleChangePage","variables","datesEnd72hrRange","gridLats","gridLons","dataIsLoading","response","gridLonsLength","gridLatsLength","idx2","fcst_data","today_snow_ge_1","today_soil_frozen","setTimeout","wrapper","changePage","CircularProgress","chartProgress","locationInstrText","mainSelect","Footer","currentYear","Date","getFullYear","classNames","footerText","footerSections","white","subFooter","boxShadow","backgroundColor","borderTop","paddingTop","overflowX","lineHeight","invertedBtnDark","flexContainer","createMuiTheme","shadows","Array","fill","palette","primary","main","alternativeTextColor","overrides","MUIDataTableBodyRow","body2","App","basename","process","exact","path","render","to","withTheme","hostname","match","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f19f0d14.chunk.js","sourcesContent":["///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\nimport { withRouter } from \"react-router-dom\";\n//import { inject, observer} from 'mobx-react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport blue from '@material-ui/core/colors/blue';\n\nfunction TabContainer({ children, dir }) {\n  return (\n    <Typography component=\"div\" dir={dir} style={{ padding: 8 * 3 }}>\n      {children}\n    </Typography>\n  );\n}\n\nTabContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n  dir: PropTypes.string.isRequired,\n};\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    marginLeft: 0,\n  },\n  tab: {\n    minWidth: 120,\n    width: 120,\n  },\n  headerText: {\n    color: blue[800],\n    fontSize: '26px',\n    fontWeight: 'bold',\n    marginBottom: '4px'\n  },\n  subHeaderText: {\n    color: blue[800],\n    fontSize: '16px'\n  },\n  rightToolbar: {\n    marginLeft: 'auto',\n    marginRight: 0,\n    [theme.breakpoints.down('sm')]: {\n      display: 'none',\n    },\n  },\n  bottomToolbar: {\n    [theme.breakpoints.up('md')]: {\n      display: 'none',\n    },\n  },\n  titleLong: {\n    cursor: 'pointer',\n    [theme.breakpoints.down('xs')]: {\n      display: 'none',\n    },\n  },\n  titleShort: {\n    cursor: 'pointer',\n    [theme.breakpoints.up('sm')]: {\n      display: 'none',\n    },\n  },\n  toolbar: theme.mixins.toolbar,\n});\n\n//var app;\n\n//@inject('store') @observer\nclass Header extends React.Component {\n\n  //constructor(props) {\n  //    super(props);\n  //    app = this.props.store.app;\n  //}\n\n  getActiveTabIndex = () => {\n    //console.log(this.props.history)\n    //console.log(this.props.history.location.pathname)\n    if (this.props.history.location.pathname==='/') {\n      return 0\n    } else if (this.props.history.location.pathname==='/forecast') {\n      return 0\n    } else if (this.props.history.location.pathname==='/howto') {\n      return 1\n    } else if (this.props.history.location.pathname==='/about') {\n      return 2\n    } else {\n    }\n  }\n\n  handleChange = (event, value) => {\n    //this.setState({ value });\n    if (value===0) {\n        // go to home (forecast) page\n        this.props.history.push('/');\n    } else if (value===1) {\n        // go to howto page\n        this.props.history.push('/howto');\n    } else if (value===2) {\n        // go to about page\n        this.props.history.push('/about');\n    } else {\n        // go to home (forecast) page\n        this.props.history.push('/');\n    }\n    //this.props.store.app.setActivePage(value);\n  };\n\n  handleChangeIndex = index => {\n    this.setState({ value: index });\n  };\n\n  render() {\n    //const { classes, theme } = this.props;\n    const { classes } = this.props;\n\n    return (\n      <div className={classes.root}>\n        <AppBar position=\"static\" color=\"inherit\">\n          <Toolbar>\n            <div className={classes.titleLong} onClick={() => {this.props.history.push('/')}}>\n                <Typography variant=\"h1\" className={classes.headerText}>\n                        Runoff Risk Forecast For New York State\n                </Typography>\n                <Typography variant=\"h2\" className={classes.subHeaderText}>\n                        Decision support tool for managing runoff risk\n                </Typography>\n            </div>\n            <div className={classes.titleShort} onClick={() => {this.props.history.push('/')}}>\n                <Typography variant=\"h1\" className={classes.headerText}>\n                        NYS Runoff Risk Forecast\n                </Typography>\n                <Typography variant=\"h2\" className={classes.subHeaderText}>\n                        Support for managing runoff risk\n                </Typography>\n            </div>\n            <section className={classes.rightToolbar}>\n              <Tabs\n                value={this.getActiveTabIndex()}\n                onChange={this.handleChange}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                variant=\"standard\"\n              >\n                <Tab classes={{ root: classes.tab }} label=\"FORECAST\" value={0} />\n                <Tab classes={{ root: classes.tab }} label=\"HOW TO\" value={1} />\n                <Tab classes={{ root: classes.tab }} label=\"ABOUT\" value={2} />\n              </Tabs>\n            </section>\n          </Toolbar>\n          <div className={classes.bottomToolbar}>\n              <Tabs\n                value={this.getActiveTabIndex()}\n                onChange={this.handleChange}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                variant=\"standard\"\n              >\n                <Tab label=\"FORECAST\" value={0} />\n                <Tab label=\"HOW TO\" value={1} />\n                <Tab label=\"ABOUT\" value={2} />\n              </Tabs>\n          </div>\n        </AppBar>\n      </div>\n    );\n  }\n}\n\nHeader.propTypes = {\n  classes: PropTypes.object.isRequired,\n  //theme: PropTypes.object.isRequired,\n};\n\nexport default withRouter(withStyles(styles)(Header));\n","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from '@material-ui/core/Typography';\n\nimport '../styles/AboutContents.css';\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  control: {\n    //padding: theme.spacing.unit * 2,\n    padding: theme.spacing(2),\n  },\n  aboutHeaderText: {\n    color: 'black',\n    fontSize: '26px',\n    fontWeight: 'bold',\n  },\n});\n\nclass AboutContents extends Component {\n\n  constructor(props) {\n      super(props);\n      this.state = {\n      };\n  }\n\n  render() {\n    //const {viewport, coordinates, popupIsVisible, imgsrc, imgcoords} = this.state;\n    const { classes } = this.props;\n\n    return (\n      <div>\n            <Grid container className={classes.root} spacing={6}>\n              <Grid item sm={12} md={6}>\n                    <Typography component={'div'} align=\"left\" paragraph variant=\"h2\" className={classes.aboutHeaderText}>\n                      Purpose of the Runoff Risk Forecast\n                    </Typography>\n                    <Typography component={'div'} align=\"justify\" paragraph variant=\"body1\">\nThe <b>New York State Runoff Risk Forecast</b> is a decision support tool designed to help farmers and commercial applicators determine the best time to spread manure. The model used by this tool uses National Weather Service forecasts for precipitation, temperature, soil moisture, snow cover and landscape characteristics to provide information about potential runoff risk in your area for the next 10 days. The forecasts are intended to be used <i>in addition to</i> other sources of information, and alongside the user's local knowledge and experience. Together, this information can be used to keep applications on target, increasing productivity and decreasing the risk of local water contamination.\n                    </Typography>\n                    <Typography component={'div'} align=\"justify\" paragraph variant=\"body1\">\nRunoff risk is forecasted for the next 10 days, with forecasts summarized into 72-hour and 24-hour intervals. While regional forecasts maps are available for an overall assessment of state conditions, selecting and viewing forecasts for specific locations of interest will be most useful. Each point forecast is for a 4 km<sup>2</sup> area (~1000 acres) that includes a selected location. The risk is grouped into four categories:\n<ul>\n<li><b>Little/No Runoff (green, blue)</b> : Little or no runoff is forecasted for your local area.</li>\n<li><b>Low (yellow)</b> : Minor risk of a runoff event is forecasted for your local area.</li>\n<li><b>Moderate (orange)</b> : The risk of a runoff event is moderate. Use this information along with other factors to determine spreading.</li>\n<li><b>High (red, purple)</b> : The risk of a runoff event is high. Use this information along with other factors to determine spreading.</li>\n</ul>\nAs noted, these forecasts are intended to be used as one tool during decision making. When the risk is Moderate or High for the area, it is recommended that the applicator closely evaluate the situation at the field level to determine if there are other locations or later dates when the application could take place.\n                    </Typography>\n                    <Typography component={'div'} align=\"justify\" paragraph variant=\"body1\">\nFor more details about using these forecasts, please visit the How To section.\n                    </Typography>\n              </Grid>\n              <Grid item sm={12} md={6}>\n                    <Typography component={'div'} align=\"left\" paragraph variant=\"h2\" className={classes.aboutHeaderText}>\n                      About the models and data\n                    </Typography>\n                    <Typography component={'div'} align=\"justify\" paragraph variant=\"body1\">\nRunoff risk forecasts are generated from a model that incorporates a modification of the  <a href=\"https://www.nws.noaa.gov/ohd/hrl/hsmb/docs/hydrology/PBE_SAC-SMA/NOAA_Technical_Report_NWS_53.pdf\">Sacremento Soil Moisture Accounting Heat Transfer Component (SAC-HT) for Enhanced Evaporation</a>. The SAC-HT model incorporates weather observations from numerous sources, including data from weather stations and remote estimates from radar and satellite. These observations provide the model with \"current conditions\" of air temperature, soil temperature, soil moisture, snow cover, and recently received precipitation.\n                    </Typography>\n                    <Typography component={'div'} align=\"justify\" paragraph variant=\"body1\">\nOnce current conditions are established, the model runs into the future to create the 10-day forecasts. The model is driven by National Weather Service forecasts for precipitation, temperature, snowfall, etc, to generate forecasts of runoff.\n                    </Typography>\n                    <Typography component={'div'} align=\"left\" paragraph variant=\"h2\" className={classes.aboutHeaderText}>\n                      Creation of runoff risk severity levels\n                    </Typography>\n                    <Typography component={'div'} align=\"justify\" variant=\"body1\">\nIn order to assess the severity of current runoff forecasts, the model is run using observations from each of the past 40 years. The historical runoff events are used for comparison with current runoff forecasts. This allows us to categorize a forecasted event based on runoff events that have happened in the past. Forecasted runoff risk severity levels have the following statistical definitions:\n<ul>\n<li><b>Little/No Runoff</b> : Forecasted runoff amount is lower than at least 70% of all historical runoff events during this month.</li>\n<li><b>Low</b> : Forecasted runoff amount is lower than at least 40% of all historical runoff events during this month.</li>\n<li><b>Moderate</b> : Forecasted runoff amount is higher than at least 60% of all historical runoff events during this month.</li>\n<li><b>High</b> : Forecasted runoff amount is higher than at least 90% of all historical runoff events during this month.</li>\n</ul>\n                    </Typography>\n                    <Typography component={'div'} align=\"justify\" paragraph variant=\"body1\">\nThe intention of this tool is not to estimate specifically how much runoff will occur, but rather the severity level based on these definitions.\n                    </Typography>\n              </Grid>\n            </Grid>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(AboutContents);\n","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from \"@material-ui/core/Grid\";\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\n\nimport '../styles/HowtoContents.css';\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  control: {\n    //padding: theme.spacing.unit * 2,\n    padding: theme.spacing(2),\n  },\n  howtoHeaderText: {\n    color: 'black',\n    fontSize: '26px',\n    fontWeight: 'bold',\n  },\n  howtoHeaderTextSub: {\n    color: 'black',\n    fontSize: '24px',\n    fontWeight: 'normal',\n    fontStyle: 'italic',\n  },\n});\n\nclass HowtoContents extends Component {\n\n  constructor(props) {\n      super(props);\n      this.state = {\n      };\n  }\n\n  render() {\n    //const {viewport, coordinates, popupIsVisible, imgsrc, imgcoords} = this.state;\n    const { classes } = this.props;\n\n    return (\n      <div>\n            <Grid container className={classes.root} spacing={6}>\n              <Grid item sm={12} md={6}>\n                    <Typography component={'div'} align=\"left\" paragraph variant=\"h2\" className={classes.howtoHeaderText}>\n                      Definition and interpretation of runoff risk severity levels\n                    </Typography>\n                    <Typography component={'div'} align=\"justify\" paragraph variant=\"body1\">\nForecasted runoff is categorized into multiple risk levels under either winter conditions (snow cover and/or frozen soil) or non-winter conditions (no snow or frozen soil). These risk levels are presented as color-coded categories on all maps, tables and charts. For each category, we provide interpretation guidance below.\n                    </Typography>\n                    <Typography component={'div'} align=\"justify\" variant=\"body1\">\n                      Forecasted <b>risk categories</b> issued under <b>non-winter conditions</b> include:<br/>\n                      <ul>\n                      <li><b><span style={{color:'#52be80'}}>LITTLE/NO RUNOFF (LNR)</span></b>: Little or no runoff is forecasted for your local area.</li>\n                      <li><b><span style={{color:'#ffd700'}}>LOW RISK</span></b>: Minor risk of a runoff event is forecasted for your local area. This minor event is expected to be less intense than at least 40% of the runoff events typically experienced during this time of year.</li>\n                      <li><b><span style={{color:'#ffaa1c'}}>MODERATE RISK</span></b>: The risk of a runoff event is moderate, and expected to be more intense than at least 60% of the runoff events typically experienced during this time of year. Use this information along with other factors to determine spreading. </li>\n                      <li><b><span style={{color:'#ff0000'}}>HIGH RISK</span></b>: The risk of a runoff event is high, and expected to be more intense than at least 90% of the runoff events typically experienced during this time of year. Use this information along with other factors to determine spreading.</li>\n                      </ul>\n                    </Typography>\n                    <Typography component={'div'} align=\"justify\" variant=\"body1\">\n                      Forecasted <b>risk categories</b> issued under <b>winter conditions</b> include:<br/>\n                      <ul>\n                      <li><b><span style={{color:'#5dade2'}}>LITTLE/NO RUNOFF (LNR)</span></b>: There is very little immediate risk of runoff expected, but winter conditions are present. Snow cover and/or frozen soil increases the likelihood of a runoff event in the future.</li>\n                      <li><b><span style={{color:'#8e44ad'}}>HIGH RISK</span></b>: The risk of a runoff event is high, with winter conditions present. Either rainfall or snowmelt is expected in combination with these winter conditions. With snow cover or frozen soil present, even small amounts of rainfall or snowmelt produces a high risk for runoff.</li>\n                      </ul>\n                    </Typography>\n              </Grid>\n              <Grid item sm={12} md={6}>\n                    <Typography component={'div'} align=\"left\" paragraph variant=\"h2\" className={classes.howtoHeaderText}>\n                      Regional forecast maps: How to use\n                    </Typography>\n                    <Typography component={'div'} align=\"justify\" paragraph variant=\"body1\">\nRegional forecast maps provide an overall view of runoff risk conditions across New York State for the next five days. By default, the runoff risk expected over the next 72 hours is shown on the map. Multiple variables and forecast dates are available for the user to select from.\n                    </Typography>\n                    <Typography component={'div'} align=\"justify\" paragraph variant=\"body1\">\n                    <Divider variant=\"middle\"/>\n                    </Typography>\n                    <Typography component={'div'} align=\"left\" paragraph variant=\"h4\" className={classes.howtoHeaderTextSub}>\n                      User selections\n                    </Typography>\n                    <Typography component={'div'} align=\"justify\" variant=\"body1\">\n                <b>VARIABLE</b> is the type of forecast element available to view.<br/>\n                <ul>\n                <li><b>Runoff Risk (72-hour)</b>: The highest runoff risk category expected over the selected 3-day period.</li>\n                <li><b>Runoff Risk (24-hour)</b>: The runoff risk category expected on the selected day.</li>\n                <li><b>Precipitation (in)</b>: Liquid-equivalent of all rain/snow forecasted for selected day.</li>\n                <li><b>Snow Water Equivalent (in)</b>: Amount of water in snowpack, if the snow were melted and measured.</li>\n                <li><b>Soil Saturation (%)</b>: The percent of soil saturation, at specified depth.</li>\n                <li><b>Soil Temperature (F)</b>: The temperature of the soil, at specified depth.</li>\n                </ul>\n                    </Typography>\n                    <Typography component={'div'} align=\"justify\" paragraph variant=\"body1\">\n                      <b>FORECAST DATE</b> is the day, or range of days, a forecast is valid for.<br/>\n                    </Typography>\n                    <Typography component={'div'} align=\"justify\" paragraph variant=\"body1\">\n                    <Divider variant=\"middle\"/>\n                    </Typography>\n                    <Typography component={'div'} align=\"left\" paragraph variant=\"h4\" className={classes.howtoHeaderTextSub}>\n                      Selecting a location\n                    </Typography>\n                    <Typography component={'div'} align=\"justify\" variant=\"body1\">\n                Location selection is performed within the regional forecast map. Once a location is selected, a detailed forecast will become available for the local area containing your location. This forecast area is 4 km<sup>2</sup> (~1000 acres), and represents the resolution of the model.<br/>\n                <ul>\n                <li><b>If a location is not yet selected</b>: Enter an address or click on the map to select a location. You can fine-tune your selection under a satellite view before saving the location.</li>\n                <li><b>If a location is selected</b>: You can change the location by clicking 'CLEAR SELECTION' before selecting a new location.</li>\n                </ul>\n                    </Typography>\n              </Grid>\n              <Grid item sm={12} md={6}>\n                    <Typography component={'div'} align=\"left\" paragraph variant=\"h2\" className={classes.howtoHeaderText}>\n                      Point forecasts for your location: How to use\n                    </Typography>\n                    <Typography component={'div'} align=\"justify\" paragraph variant=\"body1\">\nFor many users, a view of expected runoff risk for a specific location will be most useful. Once a location is selected through the regional map interface, forecasts for the local area containing the selected point (4 km<sup>2</sup>, ~1000 acres) is visible. Please keep in mind that these forecasts are intended to be used <i>in addition to</i> other sources of information, and alongside the user's local knowledge and experience. Sections included in this view are described below.\n                    </Typography>\n                    <Typography component={'div'} align=\"justify\" paragraph variant=\"body1\">\n                    <Divider variant=\"middle\"/>\n                    </Typography>\n                    <Typography component={'div'} align=\"left\" paragraph variant=\"h4\" className={classes.howtoHeaderTextSub}>\n                      Selected location details\n                    </Typography>\n                    <Typography component={'div'} align=\"justify\" paragraph variant=\"body1\">\nDetails about your selected location are provided here. <b>Longitude and latitude</b> coordinates will always be provided. Additionally, if your location was selected by typing in an address, that <b>address</b> is also provided.\n                    </Typography>\n                    <Typography component={'div'} align=\"justify\" paragraph variant=\"body1\">\nA <b>CHANGE LOCATION</b> button is also available in this section. Clicking this button clears the currently selected location, and presents you with a regional forecast map. Inside the map, you have the option of selecting a new location.\n                    </Typography>\n                    <Typography component={'div'} align=\"justify\" paragraph variant=\"body1\">\n                    <Divider variant=\"middle\"/>\n                    </Typography>\n                    <Typography component={'div'} align=\"left\" paragraph variant=\"h4\" className={classes.howtoHeaderTextSub}>\n                      72-hr Runoff Risk Summary\n                    </Typography>\n                    <Typography component={'div'} align=\"justify\" paragraph variant=\"body1\">\nA quick summary of the maximum runoff risk over the next 3 days is provided. The dates included in this short-term forecast summary are listed in the header of the section. Note that the forecast model run overnight. When finished, the updated forecasts are posted at approximately 6:30am ET each morning.\n                    </Typography>\n                    <Typography component={'div'} align=\"justify\" paragraph variant=\"body1\">\nA <b>SHOW ASSUMPTIONS</b> button provides you with important details about current conditions used by the model for this location. You can use this information to verify that data used for model input is consistent with your local field conditions. If you are currently observing different conditions than those listed here, these forecasts should have limited influence on your decision making today.\n                    </Typography>\n                    <Typography component={'div'} align=\"justify\" paragraph variant=\"body1\">\n                    <Divider variant=\"middle\"/>\n                    </Typography>\n                    <Typography component={'div'} align=\"left\" paragraph variant=\"h4\" className={classes.howtoHeaderTextSub}>\n                      Runoff Risk Forecast (full 10 days)\n                    </Typography>\n                    <Typography component={'div'} align=\"justify\" paragraph variant=\"body1\">\nBelow the 72-hr summary forecast is a more comprehensive view of the full 10-day forecast issued today. Always visible is the main color table at the top of the section. This table shows the upcoming 72-hr risk beginning on each date, along with the individual daily risks that comprise the 72-hr risk forecasts.\n                    </Typography>\n                    <Typography component={'div'} align=\"justify\" variant=\"body1\">\nBelow the main table, you can view more details of this forecast. Clicking on the <b>SHOW DETAILS</b> button provides some key components of the daily weather forecasts over the next 10 days, including:\n                <ul>\n                <li>Air temperature range</li>\n                <li>Soil Temperature</li>\n                <li>Precipitation</li>\n                <li>Snow Water Equivalent</li>\n                </ul>\n                    </Typography>\n                    <Typography component={'div'} align=\"justify\" paragraph variant=\"body1\">\nViewing these forecast components can help show why certain runoff risk forecasts were issued. For instance, it can help to show whether rainfall or snowmelt was the primary factor in a particular risk forecast.\n                    </Typography>\n              </Grid>\n            </Grid>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(HowtoContents);\n","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  control: {\n    //padding: theme.spacing.unit * 2,\n    padding: theme.spacing(2),\n  },\n  DisclaimerText: {\n    color: 'red',\n    fontSize: '16px',\n    fontWeight: 'normal',\n  },\n});\n\nclass Disclaimer extends Component {\n\n  constructor(props) {\n      super(props);\n      this.state = {\n      };\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div>\n            <Grid container className={classes.root} spacing={4}>\n              <Grid item sm={12} md={12}>\n                    <Typography align=\"center\" paragraph variant=\"h2\" className={classes.DisclaimerText}>\n                      PLEASE NOTE : This site is under development, and we are looking for <a href=\"mailto:nrcc@cornell.edu?subject=NY runoff risk feedback\">feedback</a>.\n                    </Typography>\n              </Grid>\n            </Grid>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(Disclaimer);\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\n//import PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\n\nconst HelpToolLocation = () => {\n        return (\n            <Box maxWidth={600} padding={1} border={1} borderRadius={4} borderColor=\"primary.main\" bgcolor=\"#f5f5dc\">\n              <p>\n                This section of the <b>Runoff Risk Forecast</b> tool summarizes your selected location details.\n              </p>\n              <p>\n                <b>Longitude and latitude</b> coordinates will always be provided. Additionally, if your location was selected by typing in an address, that <b>address</b> is also provided.\n              </p>\n              <p>\n                The <b>CHANGE LOCATION</b> button clears the currently selected location, and presents you with a regional forecast map. Inside the map, you have the option of selecting a new location to see its specific extended point forecast.\n              </p>\n              <p>\n                For more details, please click the <b>HOW TO</b> tab at the top of this page.\n              </p>\n            </Box>\n        );\n} \n\nconst HelpToolFcst72hr = () => {\n        return (\n            <Box maxWidth={600} padding={1} border={1} borderRadius={4} borderColor=\"primary.main\" bgcolor=\"#f5f5dc\">\n              <p>\n                This section of the <b>Runoff Risk Forecast</b> tool summarizes the maximum runoff risk expected over the next 3 days. The dates included in this short-term forecast summary are listed in the header of this section.\n              </p>\n              <p>\n                Forecast models run overnight. When finished, updated forecasts are posted at approximately 6:30am ET each morning.\n              </p>\n              <span>\n                Forecasted <b>risk categories</b> issued under <b>non-frozen conditions</b> include:<br/>\n                <ul>\n                <li><b><span style={{color:'#52be80'}}>NO RUNOFF EXPECTED (NRE)</span></b> </li>\n                <li><b><span style={{color:'#ffd700'}}>LOW RISK</span></b> </li>\n                <li><b><span style={{color:'#ffaa1c'}}>MODERATE RISK</span></b> </li>\n                <li><b><span style={{color:'#ff0000'}}>HIGH RISK</span></b> </li>\n                </ul>\n                Forecasted <b>risk categories</b> issued under <b>frozen conditions</b> include:<br/>\n                <ul>\n                <li><b><span style={{color:'#5dade2'}}>NO RUNOFF EXPECTED (NRE)</span></b> </li>\n                <li><b><span style={{color:'#8e44ad'}}>HIGH RISK</span></b> </li>\n                </ul>\n              </span>\n              <p>\n                Clicking the <b>SHOW ASSUMPTIONS</b> button provides you with important details about current conditions used by the model for this location. You can use this information to verify that data used for model input is consistent with your local field conditions.\n              </p>\n              <p>\n                For details about available risk categories, please click the <b>HOW TO</b> tab at the top of this page.\n              </p>\n            </Box>\n        );\n} \n\nconst HelpToolFcstDetails = () => {\n        return (\n            <Box maxWidth={600} padding={1} border={1} borderRadius={4} borderColor=\"primary.main\" bgcolor=\"#f5f5dc\">\n              <p>\n                This section of the <b>Runoff Risk Forecast</b> tool provides daily details of the full 10-day runoff risk forecast.\n              </p>\n              <p>\n                The <b>main color table</b> at the top of this section shows the upcoming 72-hr risk beginning on each date, along with the individual daily risks that comprise the 72-hr risk forecasts.\n              </p>\n              <p>\n                Clicking on the <b>SHOW DETAILS</b> button provides some key components of the daily weather forecasts over the next 10 days.\n              </p>\n              <p>\n                For more details, please click the <b>HOW TO</b> tab at the top of this page.\n              </p>\n            </Box>\n        );\n} \n\nconst HelpToolMap = () => {\n        return (\n            <Box maxWidth={800} padding={1} border={1} borderRadius={4} borderColor=\"primary.main\" bgcolor=\"#f5f5dc\">\n              <p>\n                This section of the <b>Runoff Risk Forecast</b> tool provides regional forecast maps for New York State over the next 5 days. Available user selections include items below.\n              </p>\n              <span>\n                <b>VARIABLE</b> is the type of forecast element available to view.<br/>\n                <ul>\n                <li><b>Runoff Risk (72-hour)</b>: The highest runoff risk category expected over the selected 3-day period.</li>\n                <li><b>Runoff Risk (24-hour)</b>: The runoff risk category expected on the selected day.</li>\n                <li><b>Precipitation (in)</b>: Liquid-equivalent of all rain/snow forecasted for selected day.</li>\n                <li><b>Snow Water Equivalent (in)</b>: Amount of water in snowpack, if the snow were melted and measured.</li>\n                <li><b>Soil Saturation (%)</b>: The percent of soil saturation, at specified depth.</li>\n                <li><b>Soil Temperature (F)</b>: The temperature of the soil, at specified depth.</li>\n                </ul>\n              </span>\n              <p>\n                <b>FORECAST DATE</b> is the day, or range of days, a forecast is valid for.<br/>\n              </p>\n              <span>\n                <b>LOCATION SELECTION</b> is performed within the regional forecast map.<br/>\n                <ul>\n                <li><b>If a location is not yet selected</b>: Enter an address or click on the map to select a location. You can fine-tune your selection under a satellite view before saving the location.</li>\n                <li><b>If a location is selected</b>: You can change the location by clicking 'CLEAR SELECTION' before selecting a new location.</li>\n                </ul>\n              </span>\n              <p>\n                For more details, please click the <b>HOW TO</b> tab at the top of this page.\n              </p>\n            </Box>\n        );\n} \n\nconst HelpToolMapFineTuneSelection = () => {\n        return (\n            <Box maxWidth={800} padding={1} border={1} borderRadius={4} borderColor=\"primary.main\" bgcolor=\"#f5f5dc\">\n              <p>\n                <b>FINE-TUNING AND SAVING LOCATION</b>\n              </p>\n              <p>\n                After initial location selection, you have the option of fine-tuning the selection within a satellite view of the area.\n              </p>\n              <p>\n                Pan the map, and click to modify your initial selection at a specific field or point of interest. Once your fine-tuning is complete, you can click 'SAVE THIS LOCATION\" within the popup box. A regional forecast map of runoff risk will appear, with location details inside the popup box. Location-specific forecast information will appear next to the regional forecast map. Depending on your view, the location-specific forecasts will be to the left or above the map.\n              </p>\n              <p>\n                For more details, please click the <b>HOW TO</b> tab at the top of this page.\n              </p>\n            </Box>\n        );\n} \n\nexport {HelpToolLocation, HelpToolFcst72hr, HelpToolFcstDetails, HelpToolMap, HelpToolMapFineTuneSelection};\n\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport HelpIcon from '@material-ui/icons/Help';\nimport Popover from '@material-ui/core/Popover';\n\nconst styles = theme => ({\n  typography: {\n    margin: theme.spacing(2),\n  },\n  menuButton: {\n    marginRight: -60,\n    marginTop: -10,\n  },\n});\n\nclass HelpToolPopover extends React.Component {\n  state = {\n    anchorEl: null,\n  };\n\n  handleClick = event => {\n    this.setState({\n      anchorEl: event.currentTarget,\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      anchorEl: null,\n    });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { anchorEl } = this.state;\n    const open = Boolean(anchorEl);\n\n    return (\n      <div>\n        <IconButton\n          color=\"inherit\"\n          aria-label=\"Help\"\n          className={classes.menuButton}\n          onClick={this.handleClick}\n        >\n          <HelpIcon />\n        </IconButton>\n        <Popover\n          id=\"simple-popper\"\n          open={open}\n          anchorEl={anchorEl}\n          onClick={this.handleClose}\n          onClose={this.handleClose}\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'center',\n          }}\n          transformOrigin={{\n            vertical: 'top',\n            horizontal: 'center',\n          }}\n        >\n          {this.props.content}\n        </Popover>\n      </div>\n    );\n  }\n}\n\nHelpToolPopover.propTypes = {\n  classes: PropTypes.object.isRequired,\n  content: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(HelpToolPopover);\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Hidden from '@material-ui/core/Hidden';\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n});\n\nconst FrontText = (props) => {\n        //const { classes } = props;\n        return (\n          <Grid item container direction=\"column\" justify=\"flex-start\" xs={12} md={4} lg={4}>\n            <Grid item>\n              <Typography gutterBottom variant=\"body2\">\n                The <b>New York State Runoff Risk Forecast</b> provides information about potential runoff risk for the next 10 days. This tool uses National Weather Service forecasts for precipitation, temperature, soil moisture, snow cover and landscape characteristics to drive these products.\n              </Typography>\n              <Hidden smDown><br/></Hidden>\n              <hr />\n              <Hidden smDown><br/></Hidden>\n              <Typography gutterBottom variant=\"body2\">\n                <b>Regional Forecasts</b> are presented as maps. Runoff risk and associated weather components can be selected and viewed on the map for specific forecast dates (above map).\n              </Typography>\n              <Hidden smDown><br/></Hidden>\n              <hr />\n              <Hidden smDown><br/></Hidden>\n              <Typography gutterBottom variant=\"body2\">\n                <b>Point Forecasts</b> provide site-specific runoff risk information in chart and table form. These forecasts can be accessed for your location by either clicking on the map, or typing your address/location where indicated in the corner of the map.\n              </Typography>\n              <Hidden smDown><br/></Hidden>\n              <hr />\n              <Hidden smDown><br/></Hidden>\n              <Typography gutterBottom variant=\"body2\">\n                For details about these forecasts and more instructions on how to use this tool, please click on the <b>How To</b> and <b>About</b> links at the top of the page.\n              </Typography>\n            </Grid>\n          </Grid>\n        );\n}\n\nexport default withStyles(styles)(FrontText);\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  formControl: {\n    minWidth: 120,\n  },\n});\n\nconst getLabel = (v) => {\n  let labels = {\n    'RRAF_dailyRiskPercWinter72Hour': 'Runoff Risk (72-hour)',\n    'RRAF_dailyRiskPercWinter': 'Runoff Risk (24-hour)',\n    'dailyPrecip_vol_INCHES': 'Precipitation (in)',\n    'dailyRAIM_vol_INCHES': 'Rainfall + Snowmelt (in)',\n    'dailyAvgSoilSat_2in': 'Soil Saturation (2\" depth, %)',\n    'dailyAvgSoilSat_6in': 'Soil Saturation (6\" depth, %)',\n    'dailyAvgSoilSat_sfc10': 'Soil Saturation (sfc-10\", %)',\n    'dailyAvgSoilTemp_2in_F': 'Soil Temperature (2\" depth, °F)',\n    'dailyAvgSoilTemp_6in_F': 'Soil Temperature (6\" depth, °F)',\n    'dailyAvgSoilTemp_sfc10_F': 'Soil Temperature (sfc-10\", °F)',\n    'dailyAvgSnowDepth_INCHES': 'Snow Depth (in)',\n    'dailyAvgSWE_INCHES': 'Snow Water Equivalent (in)'\n  }\n  return labels[v]\n}\n\nconst VarSelect = (props) => {\n        const { classes } = props;\n        return (\n          <form className={classes.root} autoComplete=\"off\">\n            <FormControl className={classes.formControl}>\n              <InputLabel htmlFor=\"var\">Variable</InputLabel>\n              <Select\n                value={props.value}\n                onChange={props.onchange}\n                inputProps={{\n                  name: 'var',\n                  id: 'var',\n                }}\n              >\n                {props.values &&\n                  props.values.map((v,i) => (\n                    <MenuItem key={i} value={v}>{getLabel(v)}</MenuItem>\n                  ))\n                }\n              </Select>\n            </FormControl>\n          </form>\n        );\n}\n\nVarSelect.propTypes = {\n  value: PropTypes.string.isRequired,\n  values: PropTypes.array.isRequired,\n  onchange: PropTypes.func.isRequired,\n};\n\nexport default withStyles(styles)(VarSelect);\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport ReactHtmlParser from 'react-html-parser';\n\nconst styles = theme => ({\n  root: {\n    //width: 200,\n    minWidth: 200,\n    width: '24vw',\n  },\n});\n\nfunction valuetext(value) {\n  return `Map for ${value[0]}`;\n}\n\nconst DateSelect = (props) => {\n        const { classes } = props;\n        let marks=null\n        // Display range of values in marks, if 'valuesEndRange' is not empty.\n        // Otherwise, display a single value for marks, as defined in 'valuesStartRange'.\n        if (props.valuesEndRange.length) {\n          marks = props.valuesStartRange.map((x,i) => {return {value: i, label: ReactHtmlParser(x.slice(4,6)+'/'+x.slice(6,8)+'-<br/>'+props.valuesEndRange[i].slice(4,6)+'/'+props.valuesEndRange[i].slice(6,8))}})\n        } else {\n          marks = props.valuesStartRange.map((x,i) => {return {value: i, label: x.slice(4,6)+'/'+x.slice(6,8)}})\n        }\n        return (\n          <div className={classes.root}>\n              <Typography id=\"date-slider\" gutterBottom>\n                  Forecast Date\n              </Typography>\n              <Slider\n                  track={false}\n                  value={props.valuesStartRange.indexOf(props.value)}\n                  onChange={props.onchange}\n                  valueLabelDisplay=\"off\"\n                  min={0}\n                  max={props.valuesStartRange.length-1}\n                  marks={marks}\n                  aria-labelledby=\"date-slider\"\n                  getAriaValueText={valuetext}\n              />\n          </div>\n        );\n}\n\nDateSelect.propTypes = {\n  value: PropTypes.string.isRequired,\n  valuesStartRange: PropTypes.array.isRequired,\n  valuesEndRange: PropTypes.array.isRequired,\n  onchange: PropTypes.func.isRequired,\n};\n\nexport default withStyles(styles)(DateSelect);\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport PropTypes from 'prop-types';\n\nlet public_url = process.env.PUBLIC_URL\n\nconst LoadForecastDates = ({dateFcstInit}) => {\n        return fetch(public_url + \"/data/fcst_dates.json?\"+dateFcstInit)\n             .then(r => r.json())\n             .then(data => {\n               return (data) ? data : null;\n             });\n}\n\nLoadForecastDates.propTypes = {\n  dateFcstInit: PropTypes.string.isRequired,\n};\n\nexport default LoadForecastDates;\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport PropTypes from 'prop-types';\n\nlet public_url = process.env.PUBLIC_URL\n\nconst LoadLonLatGrid = ({dateFcstInit}) => {\n        return fetch(public_url + \"/data/ll_jsons/ll_grid.json?\"+dateFcstInit)\n             .then(r => r.json())\n             .then(data => {\n               return (data) ? data : null;\n             });\n}\n\nLoadLonLatGrid.propTypes = {\n  dateFcstInit: PropTypes.string.isRequired,\n};\n\nexport default LoadLonLatGrid;\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\n//import React from 'react';\n//import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nlet public_url = process.env.PUBLIC_URL\n\nconst LoadPointForecast = ({idxLon,idxLat,dateFcstInit}) => {\n        //let url_string = \"http://tools.climatesmartfarming.org/runoff-risk/fcst-data/?lat=\"+lat+\"&lon=\"+lon\n        //return fetch(url_string)\n        return fetch(public_url + \"/data/pixel_data_jsons/\"+idxLat+\"_data.json?\"+dateFcstInit)\n             .then(r => r.json())\n             .then(data => {\n               return (data) ? data[idxLon] : null;\n             });\n}\n\nLoadPointForecast.propTypes = {\n  idxLon: PropTypes.string.isRequired,\n  idxLat: PropTypes.string.isRequired,\n  dateFcstInit: PropTypes.string.isRequired,\n};\n\nexport default LoadPointForecast;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport '../styles/mapLegend.css';\n\nconst mapLegendStyle = {\n  position: 'absolute',\n  bottom: 20,\n  left: 10,\n  padding: '10px'\n};\n\nconst getLabel = (v) => {\n  let labels = {\n    'RRAF_dailyRiskPerc': 'Runoff Risk (24-hour)',\n    'RRAF_dailyRiskPerc72Hour': 'Runoff Risk (72-hour)',\n    'RRAF_dailyRiskPercWinter': 'Runoff Risk (24-hour)',\n    'RRAF_dailyRiskPercWinter72Hour': 'Runoff Risk (72-hour)',\n    'RRAF_dailyRiskPercWinterTotal': 'Runoff Risk (10-day)',\n    'dailyPrecip_vol_INCHES': 'Precipitation (in)',\n    'dailyRAIM_vol_INCHES': 'Rainfall + Snowmelt (in)',\n    'dailyAvgSoilSat_2in': 'Soil Saturation (2\" depth, %)',\n    'dailyAvgSoilSat_6in': 'Soil Saturation (6\" depth, %)',\n    'dailyAvgSoilSat_sfc10': 'Soil Saturation (sfc-10\", %)',\n    'dailyAvgSoilTemp_2in_F': 'Soil Temperature (2\" depth, °F)',\n    'dailyAvgSoilTemp_6in_F': 'Soil Temperature (6\" depth, °F)',\n    'dailyAvgSoilTemp_sfc10_F': 'Soil Temperature (sfc-10\", °F)',\n    'dailyAvgSnowDepth_INCHES': 'Snow Depth (in)',\n    'dailyAvgSWE_INCHES': 'Snow Water Equivalent (in)'\n  }\n  return labels[v]\n}\n\nclass MapLegend extends React.Component {\n\n  render() {\n    if (this.props.variable.includes('Risk')) {\n      return (\n        <div className=\"map-legend\" style={mapLegendStyle}>\n          <div className=\"map-legend-title\">{getLabel(this.props.variable)}</div>\n          <div className={\"color-box rr-color-1\"}></div><span className=\"map-legend-label\">Little/No Runoff</span><br/>\n          <div className={\"color-box rr-color-2\"}></div><span className=\"map-legend-label\">Low</span><br/>\n          <div className={\"color-box rr-color-3\"}></div><span className=\"map-legend-label\">Moderate</span><br/>\n          <div className={\"color-box rr-color-4\"}></div><span className=\"map-legend-label\">High</span><br/>\n          <div className=\"map-legend-title\">Frozen Soil / Snow</div>\n          <div className={\"color-box rr-color-5\"}></div><span className=\"map-legend-label\">Little/No Runoff</span><br/>\n          <div className={\"color-box rr-color-6\"}></div><span className=\"map-legend-label\">High</span><br/>\n        </div>\n      )\n    } else if (this.props.variable==='dailyPrecip_vol_INCHES' || this.props.variable==='dailyRAIM_vol_INCHES'  || this.props.variable==='dailyAvgSWE_INCHES') {\n      return (\n        <div className=\"map-legend\" style={mapLegendStyle}>\n          <div className=\"map-legend-title\">{getLabel(this.props.variable)}</div>\n          <div className={\"color-box precip-color-1\"}></div><span className=\"map-legend-label\">Zero</span><br/>\n          <div className={\"color-box precip-color-2\"}></div><span className=\"map-legend-label\">Trace-0.10</span><br/>\n          <div className={\"color-box precip-color-3\"}></div><span className=\"map-legend-label\">0.10-0.25</span><br/>\n          <div className={\"color-box precip-color-4\"}></div><span className=\"map-legend-label\">0.25-0.50</span><br/>\n          <div className={\"color-box precip-color-5\"}></div><span className=\"map-legend-label\">0.50-0.75</span><br/>\n          <div className={\"color-box precip-color-6\"}></div><span className=\"map-legend-label\">0.75-1.00</span><br/>\n          <div className={\"color-box precip-color-7\"}></div><span className=\"map-legend-label\">1.00-1.50</span><br/>\n          <div className={\"color-box precip-color-8\"}></div><span className=\"map-legend-label\">1.50-3.00</span><br/>\n          <div className={\"color-box precip-color-9\"}></div><span className=\"map-legend-label\">{'> 3.00'}</span><br/>\n        </div>\n      )\n    } else if (this.props.variable.includes('SoilTemp')) {\n      return (\n        <div className=\"map-legend\" style={mapLegendStyle}>\n          <div className=\"map-legend-title\">{getLabel(this.props.variable)}</div>\n          <div className={\"color-box temp-color-1\"}></div><span className=\"map-legend-label\">{'< 32'}</span><br/>\n          <div className={\"color-box temp-color-2\"}></div><span className=\"map-legend-label\">32-34</span><br/>\n          <div className={\"color-box temp-color-3\"}></div><span className=\"map-legend-label\">34-40</span><br/>\n          <div className={\"color-box temp-color-4\"}></div><span className=\"map-legend-label\">40-45</span><br/>\n          <div className={\"color-box temp-color-5\"}></div><span className=\"map-legend-label\">45-50</span><br/>\n          <div className={\"color-box temp-color-6\"}></div><span className=\"map-legend-label\">{'> 50'}</span><br/>\n        </div>\n      )\n    } else if (this.props.variable.includes('SoilSat')) {\n      return (\n        <div className=\"map-legend\" style={mapLegendStyle}>\n          <div className=\"map-legend-title\">{getLabel(this.props.variable)}</div>\n          <div className={\"color-box sat-color-1\"}></div><span className=\"map-legend-label\">0-20</span><br/>\n          <div className={\"color-box sat-color-2\"}></div><span className=\"map-legend-label\">20-40</span><br/>\n          <div className={\"color-box sat-color-3\"}></div><span className=\"map-legend-label\">40-60</span><br/>\n          <div className={\"color-box sat-color-4\"}></div><span className=\"map-legend-label\">60-80</span><br/>\n          <div className={\"color-box sat-color-5\"}></div><span className=\"map-legend-label\">80-100</span><br/>\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"map-legend\" style={mapLegendStyle}>\n        </div>\n      )\n    }\n  }\n\n}\n\nMapLegend.propTypes = {\n  variable: PropTypes.string.isRequired,\n};\n\nexport default MapLegend;\n","import 'mapbox-gl/dist/mapbox-gl.css';\nimport 'react-map-gl-geocoder/dist/mapbox-gl-geocoder.css'\n//import '../styles/mapLegend.css';\nimport PropTypes from 'prop-types';\n//import ls from 'local-storage';\nimport Grid from '@material-ui/core/Grid';\n//import ReactHtmlParser from 'react-html-parser';\n\nimport React, {Component} from 'react';\n//import MapGL, {NavigationControl, Popup} from 'react-map-gl';\nimport MapGL, {NavigationControl, Popup} from 'react-map-gl';\nimport Geocoder from 'react-map-gl-geocoder';\nimport mapboxgl from 'mapbox-gl';\n\nimport Button from '@material-ui/core/Button';\n\nimport MapLegend from './MapLegend';\n\n// fix based on https://github.com/mapbox/mapbox-gl-js/issues/10173\n// @ts-ignore\n// eslint-disable-next-line import/no-webpack-loader-syntax\nmapboxgl.workerClass = require('worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker').default;\n\nconst TOKEN = 'pk.eyJ1IjoiYm5iMiIsImEiOiJjazJtYTgwajQwZnFiM29waGo4NHI1MWpnIn0.Xmb6eYeJArqqBQtKkWorUQ'\n\nconst navStyle = {\n  position: 'absolute',\n  top: 10,\n  left: 0,\n  padding: '10px'\n};\n\nconst geocoderStyle = {\n  position: 'absolute',\n  top: 10,\n  left: 0,\n  padding: '10px'\n};\n\n//class CustomMapController extends MapController {\n//  _onClick(event) {\n//    // ignore click on geocoder input\n//    if (!this._isGeocoderInputNode(event.target)) {\n//      return;\n//    }\n//\n//    //super._onClick(event);\n//  }\n//\n//  _isGeocoderInputNode(node) {\n//    return node.classList.contains(\"mapboxgl-ctrl-geocoder--input\");\n//  }\n//}\n//\n//const customMapController = new CustomMapController();\n\nclass MapDisplay extends Component {\n\n  constructor(props) {\n      super(props);\n      this.state = {\n        //coordinates: ls('RUNOFFRISK.lon') ? [ls('RUNOFFRISK.lon'),ls('RUNOFFRISK.lat')] : [-76.5,42.5],\n        //popupIsVisible: ls('RUNOFFRISK.lon') ? true : false,\n        //selectionConfirmed: ls('RUNOFFRISK.lon') ? true : false,\n        //selectionConfirmed: false,\n        imgsrc: null,\n        imgcoords: [\n          [-79.95970329697062, 46.54645497007963],\n          [-69.66501014096089, 46.54645497007963],\n          [-69.66501014096083, 39.33905737461734],\n          [-79.95970329697053, 39.3390573746173]\n        ]\n      };\n  }\n\n  componentDidMount() {\n    if (this.props.date && this.props.dateFcstInit && this.props.variable) {\n      let public_url = process.env.PUBLIC_URL\n      this.setState({\n        //add value at end of string to try and eliminate caching\n        imgsrc: public_url+'/fcst_map_images/NY_'+this.props.variable+'_'+this.props.date.slice(4,8)+this.props.date.slice(0,4)+'.png?'+this.props.dateFcstInit\n      })\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.date!==this.props.date || prevProps.dateFcstInit!==this.props.dateFcstInit || prevProps.variable!==this.props.variable) {\n      let public_url = process.env.PUBLIC_URL\n      this.setState({\n        //add value at end of string to try and eliminate caching\n        imgsrc: public_url+'/fcst_map_images/NY_'+this.props.variable+'_'+this.props.date.slice(4,8)+this.props.date.slice(0,4)+'.png?'+this.props.dateFcstInit\n      })\n    }\n  }\n\n  //mapRef = React.createRef()\n  geocoderContainerRef = React.createRef()\n  mapRef = React.createRef()\n\n  // override geocoder defaults, if necessary\n  handleGeocoderViewportChange = (viewport) => {\n    let geocoderDefaultOverrides = { transitionDuration: 1000 }\n    let viewport_updated = {\n      ...viewport,\n      ...geocoderDefaultOverrides\n    }\n\n    //this.handleSelectionConfirmed(false);\n    this.props.handlePointChange(viewport.latitude,viewport.longitude);\n    this.props.handleViewportChange(viewport_updated)\n  }\n\n  handleMapClick = (e) => {\n      //console.log('map click');\n      //console.log(e.lngLat);\n      this.props.handleSelectionConfirmed(false);\n      this.props.handlePointChange(e.lngLat[1],e.lngLat[0]);\n      let viewport_updated = {\n        ...this.props.viewport,\n        ...{latitude:e.lngLat[1],longitude:e.lngLat[0],zoom:14},\n      }\n      this.props.handleViewportChange(viewport_updated)\n  }\n\n  //handleSelectionConfirmed = (b) => {\n  //    this.setState({\n  //      selectionConfirmed: b\n  //    })\n  //}\n\n  handleSaveLocation = () => {\n      this.props.handleSelectionConfirmed(true);\n      this.props.handleViewportChange({'zoom':6});\n  }\n\n  mapStyle = (imgsrc,imgcoords) => {\n    return ({\n    'version': 8,\n    'sources': {\n      'mapbox': {\n        'type': 'vector',\n        'url': 'mapbox://mapbox.mapbox-streets-v8'\n      },\n      'overlay': {\n        'type': 'image',\n        'url': imgsrc,\n        'coordinates': imgcoords,\n      }\n    },\n    'layers': [\n      {\n        'id': 'water',\n        'source': 'mapbox',\n        'source-layer': 'water',\n        'type': 'fill',\n        'paint': { 'fill-color': '#2c2c2c' }\n      },\n      {\n        'id': 'boundaries',\n        'source': 'mapbox',\n        'source-layer': 'admin',\n        'type': 'line',\n      },\n      {\n        'id': 'overlay',\n        'source': 'overlay',\n        'type': 'raster',\n        'paint': { 'raster-opacity': 0.85 }\n      }\n    ]\n    })\n  };\n\n  mapStyleSatellite = () => {\n    return 'mapbox://styles/mapbox/satellite-streets-v11'\n  };\n\n  onChangeClick = () => {\n    this.props.initLocation()\n  }\n\n  render() {\n    //const { classes } = this.props;\n    const {imgsrc, imgcoords} = this.state;\n    const idxLocationTextEnd = (this.props.locationText) ? this.props.locationText.indexOf(', New York') : null\n    const locationText = (idxLocationTextEnd) ? this.props.locationText.slice(0,idxLocationTextEnd) : null\n    return (\n      <div>\n      <div\n        ref={this.geocoderContainerRef}\n        style={{ position: \"absolute\", top: 20, left: 60, zIndex: 1 }}\n      />\n      <MapGL\n        ref={this.mapRef}\n        {...this.props.viewport}\n        width='100%'\n        height='70vh'\n        mapStyle={(this.props.viewport.zoom>=11) ? this.mapStyleSatellite() : this.mapStyle(imgsrc,imgcoords)}\n        mapboxApiAccessToken={TOKEN}\n        onViewportChange={this.props.handleViewportChange}\n        onClick={(event) => { !this.props.selectionConfirmed &&\n            this.handleMapClick(event)\n        }}\n      >\n        { !this.props.selectionConfirmed &&\n        <div className=\"geo\" style={geocoderStyle}>\n          <Geocoder\n            mapRef={this.mapRef}\n            containerRef={this.geocoderContainerRef}\n            placeholder='Type address / click map'\n            proximity={{'longitude':-76.5,'latitude':42.5}}\n            clearOnBlur={true}\n            countries='us'\n            onViewportChange={this.handleGeocoderViewportChange}\n            //onLoading={this.handleGeocoderLoading}\n            //onResults={this.handleGeocoderResults}\n            onResult={this.props.handleGeocoderLocationChange}\n            mapboxApiAccessToken={TOKEN}\n          />\n        </div>\n        }\n        <div className=\"nav\" style={navStyle}>\n          <NavigationControl showCompass={false} />\n        </div>\n        { this.props.viewport.zoom<11 && this.props.variable &&\n          <MapLegend variable={this.props.variable} />\n        }\n        {this.props.lon && this.props.lat &&\n        <Popup\n          longitude={this.props.lon}\n          latitude={this.props.lat}\n          closeButton={false}\n          closeOnClick={true}\n          captureClick={true}\n          anchor='top'\n        >\n          { !this.props.selectionConfirmed &&\n          <div>\n            <b>Options:</b><br/>1. Continue Fine-tuning selection<br/>-OR-<br/>2.&nbsp;\n                  <Button\n                    variant=\"contained\" color=\"primary\" size=\"small\"\n                    onClick={() => this.handleSaveLocation()}\n                  >\n                    Save This Location\n                  </Button>\n          </div>\n          }\n          { this.props.selectionConfirmed &&\n          <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n            <b>Selected location details:</b>\n            {locationText}<br/>\n            Lon: {this.props.lon.toFixed(4)}, Lat: {this.props.lat.toFixed(4)}\n            <br/><br/>\n            <Button variant=\"contained\" color=\"primary\" size=\"small\" onClick={this.onChangeClick}>\n              Clear Selection\n            </Button>\n          </Grid>\n          }\n        </Popup>\n        }\n      </MapGL>\n      </div>\n    );\n  }\n}\n\nMapDisplay.propTypes = {\n  lon: PropTypes.number,\n  lat: PropTypes.number,\n  locationText: PropTypes.string,\n  selectionConfirmed: PropTypes.bool.isRequired,\n  viewport: PropTypes.object.isRequired,\n  variable: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  dateFcstInit: PropTypes.string.isRequired,\n  initLocation: PropTypes.func.isRequired,\n  handlePointChange: PropTypes.func.isRequired,\n  handleSelectionConfirmed: PropTypes.func.isRequired,\n  handleViewportChange: PropTypes.func.isRequired,\n  handleGeocoderLocationChange: PropTypes.func.isRequired,\n};\n\nexport default MapDisplay;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Highcharts from 'highcharts/highstock';\nimport HighchartsMore from 'highcharts/highcharts-more'\nimport HighchartsReact from 'highcharts-react-official';\nimport moment from 'moment';\n\n//import DashboardLegend from './dblegend.js';\n\nHighchartsMore(Highcharts)\n\nclass ThreatColumnChart extends Component {\n\n  defaults = {\n      dbchart: {\n        //colors: ['#00aa00','#ffd700','#ffaa1c','#ff0000'],\n        //zones: [1.1,2.1,3.1,4.1],\n        //colors: ['#00aa00','#0000ff','#ffd700','#ffaa1c','#ff0000','#ee82ee'],\n        colors: ['#00aa00','#d6eaf8','#ffd700','#ffaa1c','#ff0000','#ee82ee'],\n        zones: [1.01,1.03,2.1,3.1,4.01,4.03],\n      },\n      dbtable: {\n        columns: 10,\n        classes: ['no_risk','no_risk_fzn','low','moderate','high','high_fzn'],\n        labels: ['No Risk','No Risk (FZN)','Low','Moderate','High','High (FZN)'],\n        risk: ['no_risk','no_risk_fzn','low','moderate','high','high_fzn'],\n      },\n      dbthumbs: { count: 7, start: 'doi',},\n    }\n\n  data_model ={\n        dashboard: {\n          chart: Object.assign({}, this.defaults.dbchart, { seriesName:'Runoff Risk', }),\n          table: this.defaults.dbtable,\n        },\n        description: \"Runoff Risk Estimates\",\n  }\n\n  convertRiskPercToRiskCat(p) {\n      let cat=null\n      if (p>100 && p<=112) {cat = 0};\n      if (p>=0 && p<25) {cat = 1};\n      if (p>=25 && p<50) {cat = 2};\n      if (p>=50 && p<75) {cat = 3};\n      if (p>=75 && p<101) {cat = 4};\n      if (p>=112 && p<=125) {cat = 5};\n      return cat\n  }\n\n  createRiskCategories = (perc_array) => {\n    return perc_array.map(x => this.convertRiskPercToRiskCat(x))\n  }\n\n  genChartConfig(data_model, model_data, model_dates, season) {\n    let start_date = season.startDate;\n    if (model_dates.firstValid && (model_dates.firstValid > start_date)) {\n        start_date = model_dates.firstValid;\n    }\n\n    const dbchart = data_model.dashboard.chart;\n\n    const zones = dbchart.zones.map(function(zone,index) {\n        return { value:zone, className:'zone-'+(index+1).toString() }\n    });\n\n    const updateExtremes = ({ min, max }) => {\n      Highcharts.charts.forEach((chart) => {if (chart) {chart.xAxis[0].setExtremes(min, max)}})\n    };\n\n    return {\n      chart: { borderColor: '#98AFC7', borderWidth: 2, alignTicks:false, height:225, renderTo:'#dashboard-chart-container' },\n      legend: { enabled:false },\n      //navigator:{ enabled:true, height:40, margin:5, handles:{ borderColor:'#0000ff' }, series: { type:'column' }, yAxis:{ min:0.5, max:4 } },\n      navigator:{ enabled:false, height:40, margin:5, handles:{ borderColor:'#0000ff' }, series: { type:'column' }, yAxis:{ min:0.5, max:4 } },\n      plotOptions: { series: { pointStart: start_date, pointInterval: 24*3600*1000, }, },\n      rangeSelector: { selected: 0, height: 0,\n        inputEnabled: false, buttonTheme: { visibility: 'hidden' }, labelStyle: { visibility: 'hidden' },\n      },\n      //rangeSelector: { selected:0, buttonSpacing:6,\n      //  buttons: [\n      //    { type:'day', count:10, text:'10 days' },\n      //    { type:'day', count:30, text:'30 days' },\n      //    { type:'day', count:90, text:'90 days' },\n      //  ],\n      //  buttonTheme: { height:20, width:54, fill:'#cccccc',\n      //    style: { color:'%0000dd' },\n      //    states: { select: { fill:'#0000dd', style:{ color:'#ffffff' } }, }\n      //  },\n      //},\n      //scrollbar:{ height:2 },\n      scrollbar:{ enabled:false },\n      series: [\n        { colorByPoint: true,\n          colors: dbchart.colors,\n          data: model_data,\n          dataLabels: {\n            enabled:true,\n            inside:true,\n            formatter: function(){\n              if (this.y<=1.5) {return 'NRE'};\n              if (this.y===2) {return 'Low'};\n              if (this.y===3) {return 'Mod'};\n              if (this.y>=3.5) {return 'High'};\n            }\n          },\n          name: dbchart.seriesName,\n          //showInNavigator: true,\n          type: 'column',\n          zoneAxis: 'y',\n          zones: zones, \n        },\n      ],\n      title: { text: 'Runoff Risk Forecasts* (Daily)', style: {fontWeight: 'bold'} },\n      //subtitle: {\n      //  enabled: true,\n      //  text: '*NRE : No Runoff Expected',\n      //},\n      subtitle: null,\n      tooltip: { enabled:false },\n      //tooltip: { enabled:true },\n      type: 'column',\n      xAxis: {\n        title: { text: '*NRE: No Runoff Expected' },\n        type: 'datetime',\n        //tickInterval:518400000, dateTimeLabelFormats:{ day:'%d %b', week:'%d %b', month:'%b<br/>%Y', year:'%Y' },\n        dateTimeLabelFormats:{ day:'%d %b', week:'%d %b', month:'%b<br/>%Y', year:'%Y' },\n        events: {\n          afterSetExtremes (e) {\n            updateExtremes(e)\n          }\n        }\n      },\n      yAxis: { title:null, max:4, min:0, labels:{ enabled:false }, tickInterval: 1,\n      },\n      zoneAxis: 'y',\n      zones: zones, \n    }\n  }\n\n  render() {\n    let data_model = this.data_model;\n    let datastore = this.createRiskCategories(this.props.pointData['riskWinter'])\n    let year = parseInt(this.props.pointData['dates'][0].slice(0,4),10)\n    let month = parseInt(this.props.pointData['dates'][0].slice(4,6),10)\n    let day = parseInt(this.props.pointData['dates'][0].slice(6,8),10)\n    let model_dates = { 'firstValid': moment([year, month-1, day]).startOf('day') }\n    let season = { 'startDate': moment([year, month-1, day]).startOf('day') }\n\n    let dataForZones = datastore.map(x => {\n      if (x===0) {\n        return x+1.02\n      } else if (x===5) {\n        return x-0.98\n      } else {\n        return x\n      }\n    })\n\n    let dailyExtremeTemp = this.props.pointData['mint'].map((x,i) => {\n      return [this.props.pointData['mint'][i],this.props.pointData['maxt'][i]]\n    })\n\n    return (\n      <div id=\"dashboard-chart-container\">\n        <HighchartsReact\n          highcharts={Highcharts}\n          constructorType={'stockChart'}\n          options={this.genChartConfig(data_model, dataForZones, model_dates, season)}\n        />\n        <div>&nbsp;</div>\n        <HighchartsReact\n          highcharts={Highcharts}\n          constructorType={'stockChart'}\n          options={Object.assign(this.genChartConfig(data_model, dataForZones, model_dates, season), {\n            chart: { borderColor: '#98AFC7', borderWidth: 2, height:250, spacingTop: 10, marginTop: 0 },\n            //title: { text: 'Air and Soil Temperature (°F)', style: {fontWeight: 'bold'} },\n            title: null,\n            subtitle: null,\n            legend: {\n              enabled:true, verticalAlign: 'top', y: -38,\n              itemStyle: { 'fontSize': '14px' }\n            },\n            rangeSelector: { selected: 0, height: 0,\n              inputEnabled: false, buttonTheme: { visibility: 'hidden' }, labelStyle: { visibility: 'hidden' },\n            },\n            //rangeSelector: { selected: 0, height: 0,\n            //  buttons: [\n            //    { type:'day', count:10, text:'10 days' },\n            //    { type:'day', count:30, text:'30 days' },\n            //    { type:'day', count:90, text:'90 days' },\n            //  ],\n            //  inputEnabled: false, buttonTheme: { visibility: 'hidden' }, labelStyle: { visibility: 'hidden' },\n            //},\n            //navigator:{ enabled:true, height:40, margin:5, handles:{ borderColor:'#0000ff' }, series: { type:'columnrange' } },\n            series: [{\n              type: 'columnrange',\n              name: 'Air Temp Range Fcst (°F)',\n              data: dailyExtremeTemp, showInNavigator: true,\n              dataLabels: { enabled:true },\n              color: '#000000'\n            },{\n              type: 'line',\n              name: '2\" Soil Temp Fcst (°F)',\n              data: this.props.pointData['soilTemp2in'], showInNavigator: false,\n              color: '#aaaaaa',\n              lineWidth: 3\n            }],\n            xAxis: {\n              title: null,\n              dateTimeLabelFormats:{ day:'%d %b', week:'%d %b', month:'%b<br/>%Y', year:'%Y' },\n            },\n            yAxis: {\n              labels:{ enabled:true },\n              plotLines: [{\n                value: 32,\n                color: '#0000ff',\n                dashStyle: 'shortdash',\n                width: 2,\n                label: {\n                    text: '32°F'\n                }\n              }]\n            },\n          })}\n        />\n        <div>&nbsp;</div>\n        <HighchartsReact\n          highcharts={Highcharts}\n          constructorType={'stockChart'}\n          options={Object.assign(this.genChartConfig(data_model, dataForZones, model_dates, season), {\n            chart: { borderColor: '#98AFC7', borderWidth: 2, height:250, spacingTop: 10, marginTop: 0 },\n            title: null,\n            subtitle: null,\n            legend: {\n              enabled:true, verticalAlign: 'top', y: -38,\n              itemStyle: { 'fontSize': '14px' }\n            },\n            rangeSelector: { selected: 0, height: 0,\n              inputEnabled: false, buttonTheme: { visibility: 'hidden' }, labelStyle: { visibility: 'hidden' },\n            },\n            //rangeSelector: { selected: 0, height: 0,\n            //  buttons: [\n            //    { type:'day', count:10, text:'10 days' },\n            //    { type:'day', count:30, text:'30 days' },\n            //    { type:'day', count:90, text:'90 days' },\n            //  ],\n            //  inputEnabled: false, buttonTheme: { visibility: 'hidden' }, labelStyle: { visibility: 'hidden' },\n            //},\n            //navigator:{ enabled:true, height:40, margin:5, handles:{ borderColor:'#0000ff' }, series: { type:'column' } },\n            series: [{\n              type: 'area',\n              name: 'Snow Water Equiv Fcst (in)',\n              data: this.props.pointData['SWE'], showInNavigator: false,\n              color: '#aed6f1'\n            },{\n              type: 'column',\n              name: 'Rain+Snowmelt Fcst (in)',\n              data: this.props.pointData['RAIM'], showInNavigator: true,\n              dataLabels: {\n                enabled:true,\n                formatter: function(){\n                  return (this.y!==0) ? this.y.toFixed(2) : '';\n                }\n              },\n              color: '#00aa00'\n            }],\n            xAxis: {\n              title: null,\n              dateTimeLabelFormats:{ day:'%d %b', week:'%d %b', month:'%b<br/>%Y', year:'%Y' },\n            },\n            yAxis: {labels:{ enabled:true }},\n          })}\n        />\n      </div>\n    );\n  }\n}\n\nThreatColumnChart.propTypes = {\n  pointData: PropTypes.object.isRequired,\n};\n\nexport default ThreatColumnChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\n\nclass DashboardDates extends React.Component {\n\n  render() {\n    let today_date = moment().format('MM-DD')\n    let year = parseInt(this.props.pointData['dates'][0].slice(0,4),10)\n    let month = parseInt(this.props.pointData['dates'][0].slice(4,6),10)\n    let day = parseInt(this.props.pointData['dates'][0].slice(6,8),10)\n    let first_valid = [year,month-1,day]\n\n    let fcast_idx = this.props.pointData['fcstFlag'].indexOf('f')\n    let indexes = []\n    for (const [i, v] of this.props.pointData['fcstFlag'].entries()) {\n      if (v==='f') { indexes.push(i) }\n    }\n\n    return (\n      <tr id=\"dashboard-dates\" className=\"dates\">\n        <th className=\"series-name dates\">Dates</th>\n        <td className=\"series-dates\">\n          { indexes.map(function(idx) {\n            let key_str = 'date' + idx.toString();\n            let the_date = moment(first_valid).add(idx,'d').format('MM-DD');\n            if (idx < fcast_idx) {\n              if (the_date===today_date) {\n                return <span key={key_str} className={'date obs'}>{'Today'}</span>;\n              } else {\n                return <span key={key_str} className={'date obs'}>{the_date}</span>;\n              }\n            } else { \n              if (the_date===today_date) {\n                return <span key={key_str} className={'date fcast'}>{'Today'}</span>;\n              } else {\n                return <span key={key_str} className={'date fcast'}>{the_date}</span>;\n              }\n            }\n          }) }\n        </td>\n      </tr>\n    )\n  }\n}\n\nDashboardDates.propTypes = {\n  pointData: PropTypes.object.isRequired,\n};\n\nexport default DashboardDates;\n","import React from 'react';\n\nclass DashboardLegend extends React.Component {\n\n  render() {\n    let legend = {\n      'classes': ['no_risk','low','moderate','high',' ','no_risk_fzn','high_fzn'],\n      'labels': ['NRE*','Low','Moderate','High',' ','NRE* (FZN)','High (FZN)'],\n    }\n\n    return (\n      <div className=\"dashboard-element-legend\">\n        { legend.classes.map(function(value,i) {\n          let class_str = 'legend-circle ' + value;\n          let label = legend.labels[i];\n          let key_str = 'legend' + i.toString();\n          return <span key={key_str}><span className={class_str}></span>{label}</span>;\n        }) }\n      </div> \n    )\n  }\n}\n\nexport default DashboardLegend;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DashboardDates from './dbdates.js';\nimport DashboardLegend from './dblegend.js';\n\nclass DailyDataComponent extends React.Component {\n\n  render() {\n    let data = this.props.riskData\n    let risk_categories = ['no_risk_fzn','no_risk','low','moderate','high','high_fzn'];\n\n    let fcast_idx = this.props.pointData['fcstFlag'].indexOf('f')\n    let indexes = []\n    for (const [i, v] of this.props.pointData['fcstFlag'].entries()) {\n      if (v==='f') { indexes.push(i) }\n    }\n\n    return (\n      <tr id=\"daily-data\" className=\"row_1\">\n        <th className=\"series-name data\">{this.props.seriesName}</th>\n        <td className=\"series-data\">\n          { indexes.map(function(idx) {\n            let key_str = 'daily' + idx.toString();\n            let class_str = 'data ' + risk_categories[data[idx]];\n            if (idx < fcast_idx) { class_str = class_str + ' obs';\n            } else { class_str = class_str + ' fcast'; }\n            return <span key={key_str} className={class_str}>&nbsp;</span>;\n          }) }\n        </td>\n      </tr>\n    )\n  }\n}\n\n\nclass ThreatDashboardTable extends React.Component {\n\n  convertRiskPercToRiskCat(p) {\n      let cat=null\n      if (p>100 && p<=112) {cat = 0};\n      if (p>=0 && p<25) {cat = 1};\n      if (p>=25 && p<50) {cat = 2};\n      if (p>=50 && p<75) {cat = 3};\n      if (p>=75 && p<101) {cat = 4};\n      if (p>=112 && p<=125) {cat = 5};\n      return cat\n  }\n\n  createRiskCategories = (perc_array) => {\n    return perc_array.map(x => this.convertRiskPercToRiskCat(x))\n  }\n\n  //convertRiskPercToRiskCat(perc_array) {\n  //  let riskCat = perc_array\n  //    .filter(x => x>=0 && x<=120)\n  //    .map(x => {\n  //      if (x>100 && x<=110) {return 0};\n  //      if (x>=0 && x<25) {return 1};\n  //      if (x>=25 && x<50) {return 2};\n  //      if (x>=50 && x<75) {return 3};\n  //      if (x>=75 && x<=100) {return 4};\n  //      if (x>=110 && x<=120) {return 5};\n  //    })\n  //  return riskCat;\n  //}\n\n  render () {\n\n    return (\n      <div className=\"turf-dashboard-element\">\n        <div className=\"dashboard-element-header\">\n          <DashboardLegend />\n        </div>\n        <table className=\"turf-dashboard-table\" cellPadding=\"0\" cellSpacing=\"0\">\n        <tbody>\n          <DailyDataComponent\n            pointData={this.props.pointData}\n            riskData={this.createRiskCategories(this.props.pointData['riskWinter72hr'])}\n            seriesName='72-hr Risk'\n          />\n          <DailyDataComponent\n            pointData={this.props.pointData}\n            riskData={this.createRiskCategories(this.props.pointData['riskWinter'])}\n            seriesName='Daily Risk'\n          />\n          <DashboardDates pointData={this.props.pointData} />\n        </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n\nThreatDashboardTable.propTypes = {\n  pointData: PropTypes.object.isRequired,\n};\n\nexport default ThreatDashboardTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n//import Hidden from '@material-ui/core/Hidden';\n//import red from '@material-ui/core/colors/red';\n//import blue from '@material-ui/core/colors/blue';\nimport Button from '@material-ui/core/Button';\n//import moment from 'moment';\n\n//import HelpToolContent from \"../HelpToolContent\";\nimport {HelpToolLocation} from \"../HelpToolContent\";\nimport HelpToolPopover from \"../HelpToolPopover\";\n\n//import UserSnowSwitch from '../UserSnowSwitch';\n//import UserSoilFznSwitch from '../UserSoilFznSwitch';\n\nconst styles = theme => ({\n//  button: {\n//    color: blue[500],\n//  },\n});\n\nclass DashboardLocation extends React.Component {\n\n  onChangeClick = () => {\n    this.props.initLocation()\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    const idxTitleEnd = (this.props.locationText) ? this.props.locationText.indexOf(', New York') : null\n    const titleText = (idxTitleEnd) ? this.props.locationText.slice(0,idxTitleEnd) : null\n\n    return (\n      <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n          <div id=\"turf-dashboard-location\">\n            <span className=\"location-title\">{'Selected location details:'}</span>\n            <br/>\n            {titleText &&\n              <div>\n              <span className=\"location-address\">{titleText}</span>\n              </div>\n            }\n            <span className=\"location-address\">Lon: {parseFloat(this.props.lon).toFixed(4)}, Lat: {parseFloat(this.props.lat).toFixed(4)}</span>\n            <Grid container item spacing={1} direction=\"row\" justify=\"center\" alignItems=\"center\">\n              <Grid item>\n                <Button className={classes.button} variant=\"contained\" color=\"primary\" size=\"small\" onClick={this.onChangeClick}>\n                  Change Location\n                </Button>\n              </Grid>\n              <Grid item>\n                <HelpToolPopover content={<HelpToolLocation/>} />\n              </Grid>\n            </Grid>\n            <br/>\n          </div>\n      </Grid>\n    )\n  }\n}\n\nDashboardLocation.propTypes = {\n  lon: PropTypes.string.isRequired,\n  lat: PropTypes.string.isRequired,\n  initLocation: PropTypes.func.isRequired,\n  pointData: PropTypes.object.isRequired,\n  locationText: PropTypes.string,\n  userSnow: PropTypes.string.isRequired,\n  userSnowChange: PropTypes.func.isRequired,\n  userSoilFzn: PropTypes.string.isRequired,\n  userSoilFznChange: PropTypes.func.isRequired,\n};\n\n//export default DashboardLocation;\nexport default withStyles(styles)(DashboardLocation);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n//import Hidden from '@material-ui/core/Hidden';\nimport red from '@material-ui/core/colors/red';\n//import Button from '@material-ui/core/Button';\nimport moment from 'moment';\n\nconst styles = theme => ({\n  button: {\n    color: red[500],\n  },\n});\n\nclass DashboardSummary extends React.Component {\n\n  convertRiskPercToRiskCat(p) {\n      let cat=null\n      if (p>100 && p<=112) {cat = 0};\n      if (p>=0 && p<25) {cat = 1};\n      if (p>=25 && p<50) {cat = 2};\n      if (p>=50 && p<75) {cat = 3};\n      if (p>=75 && p<101) {cat = 4};\n      if (p>=112 && p<=125) {cat = 5};\n      return cat\n  }\n\n  convertRiskCatToText(c,d) {\n    let txtRisk = ''\n    if (c===0) {txtRisk = 'NO RUNOFF EXPECTED'}\n    if (c===1) {txtRisk = 'NO RUNOFF EXPECTED'}\n    if (c===2) {txtRisk = 'LOW RISK'}\n    if (c===3) {txtRisk = 'MODERATE RISK'}\n    if (c===4) {txtRisk = 'HIGH RISK'}\n    if (c===5) {txtRisk = 'HIGH RISK'}\n    let date1 = parseInt(d[0].slice(4,6),10).toString()+'/'+parseInt(d[0].slice(6,8),10).toString()\n    let date2 = parseInt(d[1].slice(4,6),10).toString()+'/'+parseInt(d[1].slice(6,8),10).toString()\n    let date3 = parseInt(d[2].slice(4,6),10).toString()+'/'+parseInt(d[2].slice(6,8),10).toString()\n    //let summaryTxt = '72-Hr Runoff Risk through '+d.slice(0,4)+'-'+d.slice(4,6)+'-'+d.slice(6,8)+' : '\n    let summaryTxt = '72-Hr Runoff Risk ('+date1+', '+date2+', '+date3+') *'\n    return {'summaryTxt':summaryTxt, 'riskTxt':txtRisk, 'categoryValue':c}\n  }\n\n  render() {\n    //const { classes } = this.props;\n\n    let today_date = moment().format('YYYYMMDD')\n    let today_idx = this.props.pointData['dates'].indexOf(today_date)\n    let today_p = this.props.pointData['riskWinter72hr'][today_idx]\n    let fcast_dates = [this.props.pointData['dates'][today_idx], this.props.pointData['dates'][today_idx+1], this.props.pointData['dates'][today_idx+2]]\n    let cat = this.convertRiskPercToRiskCat(today_p)\n    //let cat = this.convertRiskPercToRiskCat(fcast_p)\n    //let fcast_idx = this.props.pointData['fcstFlag'].indexOf('f')\n    //let fcast_p = this.props.pointData['riskWinter72hr'][fcast_idx]\n    //let fcast_date = this.props.pointData['dates'][fcast_idx+2]\n    //let cat = this.convertRiskPercToRiskCat(fcast_p)\n    let summaryObj = {}\n    summaryObj = this.convertRiskCatToText(cat,fcast_dates)\n\n    return (\n      <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n          <div id=\"turf-dashboard-summary\">\n            <span className=\"summary-text\">{summaryObj['summaryTxt']}</span>\n            <br/>\n            { summaryObj['categoryValue']===0 && <span className=\"summary-risk-text no-risk-fzn\">{summaryObj['riskTxt']}</span> }\n            { summaryObj['categoryValue']===1 && <span className=\"summary-risk-text no-risk\">{summaryObj['riskTxt']}</span> }\n            { summaryObj['categoryValue']===2 && <span className=\"summary-risk-text low-risk\">{summaryObj['riskTxt']}</span> }\n            { summaryObj['categoryValue']===3 && <span className=\"summary-risk-text moderate-risk\">{summaryObj['riskTxt']}</span> }\n            { summaryObj['categoryValue']===4 && <span className=\"summary-risk-text high-risk\">{summaryObj['riskTxt']}</span> }\n            { summaryObj['categoryValue']===5 && <span className=\"summary-risk-text high-risk-fzn\">{summaryObj['riskTxt']}</span> }\n            <br/>\n            <span className=\"summary-fcst-time-note\">{'* NOTE : Forecasts are updated ~ 6:30am ET daily'}</span>\n          </div>\n      </Grid>\n    )\n  }\n}\n\nDashboardSummary.propTypes = {\n  pointData: PropTypes.object.isRequired,\n};\n\n//export default DashboardLocation;\nexport default withStyles(styles)(DashboardSummary);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\n\nclass DashboardAssumptions extends Component {\n\n  render() {\n\n    let today_date = moment().format('M/D')\n\n    return (\n      <div id=\"turf-dashboard-location\">\n        <span className=\"location-assumptions-text\">As of {today_date}, estimates of winter/non-winter conditions at your location include:</span>\n\t<br/><br/>\n        {this.props.userSnow==='yes' &&\n          <span className=\"location-assumptions-items\">Snow depth &ge; 1\".</span>\n        }\n        {this.props.userSnow==='no' &&\n          <span className=\"location-assumptions-items\">Very little or no snow cover (snow depth &lt; 1\").</span>\n        }\n\t<br/>\n        {this.props.userSoilFzn==='yes' &&\n          <span className=\"location-assumptions-items\">Soil is frozen.</span>\n        }\n        {this.props.userSoilFzn==='no' &&\n          <span className=\"location-assumptions-items\">Soil is NOT frozen.</span>\n        }\n\t<br/><br/>\n        <span className=\"location-assumptions-text\">{'These estimates are determined from observations in your area. However, local conditions can vary at field level.'}</span>\n        <span className=\"location-assumptions-warning\">{'If you are currently observing different conditions than those listed above, these forecasts should have limited influence on your decision making today.'}</span>\n      </div>\n    );\n  }\n}\n\nDashboardAssumptions.propTypes = {\n  pointData: PropTypes.object.isRequired,\n  userSnow: PropTypes.string.isRequired,\n  userSoilFzn: PropTypes.string.isRequired,\n};\n\nexport default DashboardAssumptions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass DashboardTitle extends React.Component {\n\n  render() {\n    let fcast_idx = this.props.pointData['fcstFlag'].indexOf('f')\n    let year = this.props.pointData['dates'][fcast_idx].slice(0,4)\n    let month = this.props.pointData['dates'][fcast_idx].slice(4,6)\n    let day = this.props.pointData['dates'][fcast_idx].slice(6,8)\n\n    return (\n      <div className=\"dashboard-title\">Runoff Risk Forecast issued {month}-{day}-{year}</div>\n    )\n  }\n}\n\nDashboardTitle.propTypes = {\n  pointData: PropTypes.object.isRequired,\n};\n\nexport default DashboardTitle;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport \"../../styles/dashboard.css\";\nimport ThreatColumnChart from './dbchart.js';\nimport ThreatDashboardTable from './dbtable.js';\nimport DashboardLocation from './dblocation.js';\nimport DashboardSummary from './dbsummary.js';\nimport DashboardAssumptions from './dbassumptions.js';\nimport DashboardTitle from './dbtitle.js';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from \"@material-ui/core/Grid\";\n\nimport {HelpToolFcst72hr, HelpToolFcstDetails} from \"../HelpToolContent\";\nimport HelpToolPopover from \"../HelpToolPopover\";\n\nclass PointDisplay extends React.Component {\n\n  getDetailsButtonText() {\n    let text = ''\n    if (this.props.detailView) { text = '- Hide Details' }\n    if (!this.props.detailView) { text = '+ Show Details' }\n    return text\n  }\n\n  getAssumptionsButtonText() {\n    let text = ''\n    if (this.props.assumptionsView) { text = '- Hide Assumptions' }\n    if (!this.props.assumptionsView) { text = '+ Show Assumptions' }\n    return text\n  }\n\n  shouldComponentUpdate(nextProps) {\n    return (this.props.pointData !== nextProps.pointData) || (this.props.detailView !== nextProps.detailView) || (this.props.assumptionsView !== nextProps.assumptionsView) || (this.props.userSnow !== nextProps.userSnow) || (this.props.userSoilFzn !== nextProps.userSoilFzn);\n  }\n\n  render() {\n    return (\n      <div id=\"turf-dashboard\">\n        <div id=\"turf-dashboard-elements\">\n          {this.props.lon && this.props.lat && this.props.pointData && this.props.userSnow &&\n            <div>\n            { window.innerWidth > 500 &&\n            <DashboardLocation lon={this.props.lon} lat={this.props.lat} locationText={this.props.locationText} pointData={this.props.pointData} initLocation={this.props.initLocation} userSnow={this.props.userSnow} userSnowChange={this.props.userSnowChange} userSoilFzn={this.props.userSoilFzn} userSoilFznChange={this.props.userSoilFznChange}/>\n            }\n            { window.innerWidth > 500 &&\n            <Divider variant=\"middle\" />\n            }\n            <DashboardSummary pointData={this.props.pointData} />\n            <Grid container item spacing={1} direction=\"row\" justify=\"center\" alignItems=\"center\">\n              <Grid item>\n                <Button variant=\"contained\" color=\"primary\" size=\"small\" onClick={this.props.updateAssumptionsView}>\n                  {this.getAssumptionsButtonText()}\n                </Button>\n              </Grid>\n              <Grid item>\n                <HelpToolPopover content={<HelpToolFcst72hr/>} />\n              </Grid>\n            </Grid>\n            {this.props.assumptionsView &&\n              <DashboardAssumptions pointData={this.props.pointData} userSnow={this.props.userSnow} userSoilFzn={this.props.userSoilFzn} />\n            }\n            <br/>&nbsp;\n            <Divider variant=\"middle\" />\n            <br/>\n            <DashboardTitle pointData={this.props.pointData} />\n            <ThreatDashboardTable pointData={this.props.pointData} />\n            <div><span className='nre-note'>*NRE: No Runoff Expected &nbsp;</span></div>\n            <Grid container item spacing={1} direction=\"row\" justify=\"center\" alignItems=\"center\">\n              <Grid item>\n                <Button variant=\"contained\" color=\"primary\" size=\"small\" onClick={this.props.updateDetailView}>\n                  {this.getDetailsButtonText()}\n                </Button>\n              </Grid>\n              <Grid item>\n                <HelpToolPopover content={<HelpToolFcstDetails/>} />\n              </Grid>\n            </Grid>\n            </div>\n          }\n          {this.props.detailView &&\n            <ThreatColumnChart pointData={this.props.pointData} />\n          }\n          <div>&nbsp;</div>\n        </div>\n      </div>\n    )\n  }\n}\n\nPointDisplay.propTypes = {\n  lon: PropTypes.string.isRequired,\n  lat: PropTypes.string.isRequired,\n  initLocation: PropTypes.func.isRequired,\n  pointData: PropTypes.object.isRequired,\n  locationText: PropTypes.string,\n  assumptionsView: PropTypes.bool.isRequired,\n  updateAssumptionsView: PropTypes.func.isRequired,\n  detailView: PropTypes.bool.isRequired,\n  updateDetailView: PropTypes.func.isRequired,\n  userSnow: PropTypes.string.isRequired,\n  userSnowChange: PropTypes.func.isRequired,\n  userSoilFzn: PropTypes.string.isRequired,\n  userSoilFznChange: PropTypes.func.isRequired,\n};\n\nexport default PointDisplay;\n\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport React, { Component } from 'react';\n//import { withRouter } from \"react-router-dom\";\n//import { inject, observer} from 'mobx-react';\n//import PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport blue from '@material-ui/core/colors/blue';\nimport Button from '@material-ui/core/Button';\nimport ls from 'local-storage';\nimport moment from 'moment';\n\n//import 'leaflet/dist/leaflet.css';\nimport Grid from '@material-ui/core/Grid';\n//import Hidden from '@material-ui/core/Hidden';\nimport Typography from '@material-ui/core/Typography';\n\nimport {HelpToolMap, HelpToolMapFineTuneSelection} from \"./HelpToolContent\";\nimport HelpToolPopover from \"./HelpToolPopover\";\nimport FrontText from './FrontText';\nimport VarSelect from './VarSelect';\nimport DateSelect from './DateSelect';\n//import MapLegend from './MapLegend';\nimport LoadForecastDates from './LoadForecastDates';\nimport LoadLonLatGrid from './LoadLonLatGrid';\nimport LoadPointForecast from './LoadPointForecast';\nimport MapDisplay from './MapDisplay';\nimport PointDisplay from './PointDisplay/PointDisplay';\n\n// Styles\nimport '../styles/ToolContents.css';\n\nconst styles = theme => ({\n//  root: {\n//    flexGrow: 1,\n//  },\n  button: {\n    color: blue[500],\n  },\n  wrapper: {\n    position: 'relative',\n  },\n  mainSelect: {\n    marginLeft: '0px'\n  },\n  chartProgress: {\n    color: blue[500],\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    marginTop: -60,\n    marginLeft: -40,\n  },\n  locationInstrText: {\n    color: 'black',\n    fontSize: '1.2em',\n    fontWeight: 'bold',\n  },\n});\n\nclass ToolContents extends Component {\n    //const { classes } = props;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n          //variable: 'dailyRiskPercWinter72Hour',\n          //variables: ['dailyRiskPercWinter72Hour','dailyRiskPercWinter','dailyPrecip','dailyAvgSWE','dailyAvgSoilSat_2in','dailyAvgSoilSat_6in','dailyAvgSoilSat_sfcTo10in','dailyAvgSoilTemp_2in','dailyAvgSoilTemp_6in','dailyAvgSoilTemp_sfcTo10in'],\n          variable: 'RRAF_dailyRiskPercWinter72Hour',\n          variables: ['RRAF_dailyRiskPercWinter72Hour','RRAF_dailyRiskPercWinter','dailyPrecip_vol_INCHES','dailyRAIM_vol_INCHES','dailyAvgSWE_INCHES','dailyAvgSoilSat_2in','dailyAvgSoilSat_6in','dailyAvgSoilSat_sfc10','dailyAvgSoilTemp_2in_F','dailyAvgSoilTemp_6in_F','dailyAvgSoilTemp_sfc10_F'],\n          date: null,\n          dates: null,\n          datesEnd72hrRange: null,\n          gridLats: [],\n          gridLons: [],\n          lat: ls('RUNOFFRISK.lat') || null,\n          lon: ls('RUNOFFRISK.lon') || null,\n          idxLon: null,\n          idxLat: null,\n          selectionConfirmed: ls('RUNOFFRISK.lon') ? true : false,\n          pointData: null,\n          userSnow: null,\n          userSoilFzn: null,\n          locationText: ls('RUNOFFRISK.locationText') || null,\n          viewport: {\n            longitude: -75.77,\n            latitude: 42.51,\n            zoom: 6\n          },\n          //coordinates: ls('RUNOFFRISK.lon') ? [ls('RUNOFFRISK.lon'),ls('RUNOFFRISK.lat')] : [-76.5,42.5],\n          detailView: false,\n          assumptionsView: false,\n          dataIsLoading: false\n        }\n    }\n\n    componentDidMount() {\n        let today_date = moment().format('YYYYMMDD')\n        // Find current forecast dates\n        LoadForecastDates({dateFcstInit:today_date})\n          .then(response => {\n            this.setState({\n              date: (response['fcstDates'].slice(0,5).includes(today_date)) ? today_date : response['fcstDates'][0],\n              dates: response['fcstDates'].slice(0,5),\n              datesEnd72hrRange: response['fcstDates'].slice(2,7),\n            })\n          });\n\n\t// Load lon and lat arrays. We use these to calculate current grid indices\n        this.setState({\n          dataIsLoading: true\n        })\n        LoadLonLatGrid({dateFcstInit:today_date})\n          .then(response => {\n            this.setState({\n              gridLons: response['lons'],\n              gridLats: response['lats'],\n            })\n\n\t    // Find indices of current grid\n            if ((this.state.lat && this.state.lon && response['lons'].length && response['lats'].length)) {\n\n              // find grid index in lon direction\n              let gridLonsLength = response['lons'].length;\n              let idxLon = null;\n              for (var idx = 0; idx < gridLonsLength-1; idx++) {\n                if (this.state.lon >= response['lons'][idx] && this.state.lon < response['lons'][idx+1]) {\n                  idxLon = idx\n                  break;\n                }\n              }\n\n              // find grid index in lat direction\n              let gridLatsLength = response['lats'].length\n              let idxLat = null;\n              for (var idx2 = 0; idx2 < gridLatsLength-1; idx2++) {\n                if (this.state.lat <= response['lats'][idx2] && this.state.lat > response['lats'][idx2+1]) {\n                  idxLat = idx2\n                  break;\n                }\n              }\n\n              // get point forecast for this grid point\n              if (idxLon && idxLat && today_date) {\n\t        // Find all forecast data for a given location\n                LoadPointForecast({idxLon:idxLon.toString(), idxLat:idxLat.toString(), dateFcstInit:today_date})\n                  .then(fcst_data => {\n                    //console.log(fcst_data)\n                    let today_idx = fcst_data['dates'].indexOf(today_date)\n                    let today_snow_ge_1 = fcst_data['winterCond'][today_idx]\n                    let today_soil_frozen = fcst_data['winterCond'][today_idx]\n                    this.setState({\n                      idxLon: idxLon,\n                      idxLat: idxLat,\n                      //gridLons: response['lons'],\n                      //gridLats: response['lats'],\n                      pointData: fcst_data,\n                      userSnow: (today_snow_ge_1===2 || today_snow_ge_1===3) ? 'yes' : 'no',\n                      userSoilFzn: (today_soil_frozen===1 || today_soil_frozen===3) ? 'yes' : 'no',\n                      dataIsLoading: false\n                    })\n                  });\n              }\n\n            }\n\n          });\n\n    }\n\n    componentDidUpdate(prevProps,prevState) {\n        if (this.state.dates && this.state.gridLons.length && this.state.gridLats.length && this.state.lat && this.state.lon && (prevState.lat!==this.state.lat) && (prevState.lon!==this.state.lon)) {\n          // This is a location change by the user - find new grid indices and load data for this new lon/lat\n          this.setState({\n            dataIsLoading: true\n          })\n          setTimeout(() => {\n                  // find grid index in lon direction\n                  let gridLonsLength = this.state.gridLons.length;\n                  let idxLon = null;\n                  for (var idx = 0; idx < gridLonsLength-1; idx++) {\n                    if (this.state.lon >= this.state.gridLons[idx] && this.state.lon < this.state.gridLons[idx+1]) {\n                      idxLon = idx\n                      break;\n                    }\n                  }\n\n                  // find grid index in lat direction\n                  let gridLatsLength = this.state.gridLats.length\n                  let idxLat = null;\n                  for (var idx2 = 0; idx2 < gridLatsLength-1; idx2++) {\n                    if (this.state.lat <= this.state.gridLats[idx2] && this.state.lat > this.state.gridLats[idx2+1]) {\n                      idxLat = idx2\n                      break;\n                    }\n                  }\n\n                  // get point forecast for this grid point\n                  if (idxLon && idxLat && this.state.dates) {\n\t            // Find all forecast data for a given location\n                    LoadPointForecast({idxLon:idxLon.toString(), idxLat:idxLat.toString(), dateFcstInit:this.state.dates[0]})\n                      .then(fcst_data => {\n                        let today_date = moment().format('YYYYMMDD')\n                        let today_idx = fcst_data['dates'].indexOf(today_date)\n                        let today_snow_ge_1 = fcst_data['winterCond'][today_idx]\n                        let today_soil_frozen = fcst_data['winterCond'][today_idx]\n                        this.setState({\n                          idxLon: idxLon,\n                          idxLat: idxLat,\n                          pointData: fcst_data,\n                          userSnow: (today_snow_ge_1===2 || today_snow_ge_1===3) ? 'yes' : 'no',\n                          userSoilFzn: (today_soil_frozen===1 || today_soil_frozen===3) ? 'yes' : 'no',\n                          dataIsLoading: false\n                        })\n                      });\n                  }\n\n            //LoadPointForecast({lon:this.state.lon.toString(), lat:this.state.lat.toString()})\n            //  .then(response => {\n            //    let today_date = moment().format('YYYYMMDD')\n            //    let today_idx = response['dates'].indexOf(today_date)\n            //    //let today_swe = response['SWE'][today_idx]\n            //    //let today_soilt = response['soilTemp2in'][today_idx]\n            //    let today_snow_ge_1 = response['winterCond'][today_idx]\n            //    let today_soil_frozen = response['winterCond'][today_idx]\n            //    this.setState({\n            //      pointData: response,\n            //      //userSnow: (today_swe>=0.01) ? 'yes' : 'no',\n            //      //userSoilFzn: (today_soilt<=32) ? 'yes' : 'no',\n            //      //userSnow: (today_snow_ge_1===0) ? 'no' : 'yes',\n            //      //userSoilFzn: (today_soil_frozen===0) ? 'no' : 'yes',\n            //      userSnow: (today_snow_ge_1===2 || today_snow_ge_1===3) ? 'yes' : 'no',\n            //      userSoilFzn: (today_soil_frozen===1 || today_soil_frozen===3) ? 'yes' : 'no',\n            //      dataIsLoading: false\n            //    })\n            //  })\n            },\n            1000\n          );\n        }\n        if (!this.state.lat && !this.state.lon && (prevState.lat!==this.state.lat) && (prevState.lon!==this.state.lon)) {\n          // This represents a location that has been removed by the user ('Change Location' button).\n          // Therefore, we will reinitialize the viewport for the mapbox map.\n          this.initViewport()\n        }\n    }\n\n    initLocation = () => {\n      this.setState({\n        lon: null,\n        lat: null,\n        idxLon: null,\n        idxLat: null,\n        pointData: null,\n        locationText: null,\n        userSnow: null,\n        userSoilFzn: null,\n        selectionConfirmed: false,\n      })\n      ls.remove('RUNOFFRISK.lat')\n      ls.remove('RUNOFFRISK.lon')\n      ls.remove('RUNOFFRISK.locationText')\n    }\n\n    initViewport = () => {\n      this.setState({\n        viewport: {\n          longitude: -75.77,\n          latitude: 42.51,\n          zoom: 6\n        },\n      })\n    }\n\n    handlePointChange = (lt,ln) => {\n      this.setState({\n        lat: lt,\n        lon: ln,\n        locationText: null,\n        detailView: false,\n        assumptionsView: false,\n      })\n      ls.set('RUNOFFRISK.lon',ln)\n      ls.set('RUNOFFRISK.lat',lt)\n      if (ls('RUNOFFRISK.locationText')) {ls.remove('RUNOFFRISK.locationText')}\n    }\n\n    handleViewportChange = (viewport) => {\n      this.setState({\n        viewport: { ...this.state.viewport, ...viewport },\n      })\n    }\n\n    handleDateChange = (e,newValue) => {\n      this.setState({\n        //date: newValue.toString(),\n        date: this.state.dates[newValue],\n      })\n    }\n\n    handleVarChange = (e) => {\n      this.setState({\n        variable: e.target.value,\n      })\n    }\n\n    handleChangeUserSnow = (e) => {\n        this.setState({\n          userSnow: e.target.value,\n        })\n    }\n\n    handleChangeUserSoilFzn = (e) => {\n        this.setState({\n          userSoilFzn: e.target.value,\n        })\n    }\n\n    handleDetailViewChange = () => {\n      this.setState((prevState) => ({\n        detailView: !prevState.detailView,\n      }) )\n    }\n\n    handleAssumptionsViewChange = () => {\n      this.setState((prevState) => ({\n        assumptionsView: !prevState.assumptionsView,\n      }) )\n    }\n\n    handleGeocoderLocationChange = (e) => {\n      //console.log(e.result)\n      this.setState({\n        locationText: e.result.place_name,\n        selectionConfirmed: false,\n      })\n      ls.set('RUNOFFRISK.locationText',e.result.place_name)\n    }\n\n    handleSelectionConfirmed = (b) => {\n        this.setState({\n          selectionConfirmed: b\n        })\n    }\n\n    handleChangePage = (p) => {\n      this.props.history.push(p);\n    }\n\n    render() {\n\n        const { classes } = this.props;\n\n        return (\n            <div>\n                  <Grid container justify=\"space-evenly\" spacing={6}>\n\n                      {this.state.lat &&\n                      <Grid item xs={12} lg={6}>\n                        <div className={classes.wrapper}>\n                          { this.state.lon && this.state.lat && this.state.pointData && this.state.userSnow && this.state.userSoilFzn &&\n                            <PointDisplay\n                              lon={this.state.lon.toString()}\n                              lat={this.state.lat.toString()}\n                              pointData={this.state.pointData}\n                              initLocation={this.initLocation}\n                              locationText={this.state.locationText}\n                              assumptionsView={this.state.assumptionsView}\n                              updateAssumptionsView={this.handleAssumptionsViewChange}\n                              detailView={this.state.detailView}\n                              updateDetailView={this.handleDetailViewChange}\n                              userSnow={this.state.userSnow}\n                              userSnowChange={this.handleChangeUserSnow}\n                              userSoilFzn={this.state.userSoilFzn}\n                              userSoilFznChange={this.handleChangeUserSoilFzn}\n                              changePage={this.handleChangePage}\n                            />\n                          }\n                          { !this.state.pointData &&\n                            <div style={{height:'400px'}}>&nbsp;</div>\n                          }\n                          { this.state.dataIsLoading && <CircularProgress size={140} className={classes.chartProgress} /> }\n                        </div>\n                      </Grid>\n                      }\n\n                      {!this.state.lat &&\n                      <FrontText />\n                      }\n\n                      <Grid item container direction=\"column\" justify=\"flex-start\" xs={12} md={8} lg={(this.state.lat) ? 6 : 8} spacing={3} >\n                        {!this.state.lon && !this.state.lat &&\n                        <Grid item>\n                          <Typography align=\"center\" paragraph variant=\"body2\" className={classes.locationInstrText}>\n                            TO ACCESS POINT FORECASTS : Click on map or type in address/location below.\n                          </Typography>\n                        </Grid>\n                        }\n                        {this.state.viewport.zoom < 11 &&\n                        <Grid item container direction=\"row\" justify=\"space-evenly\" alignItems=\"flex-start\">\n                          <Grid item>\n                            <VarSelect\n                              value={this.state.variable}\n                              values={this.state.variables}\n                              onchange={this.handleVarChange}\n                            />\n                          </Grid>\n                          <Grid item>\n                            { this.state.date && this.state.dates &&\n                              <DateSelect\n                                value={this.state.date}\n                                valuesStartRange={this.state.dates}\n                                valuesEndRange={(this.state.variable==='RRAF_dailyRiskPercWinter72Hour') ? this.state.datesEnd72hrRange : []}\n                                onchange={this.handleDateChange}\n                              />\n                            }\n                          </Grid>\n                          <Grid item>\n                            <HelpToolPopover content={<HelpToolMap/>} />\n                          </Grid>\n                        </Grid>\n                        }\n                        {this.state.viewport.zoom >= 11 && this.state.lon && this.state.lat && !this.state.selectionConfirmed &&\n                        <Grid item container direction=\"row\" justify=\"space-evenly\" alignItems=\"flex-end\">\n                          <Grid item xs={10}>\n                            <Typography align=\"center\" paragraph variant=\"body2\" className={classes.locationInstrText}>\n                              Fine-tune your selection and click 'SAVE THIS LOCATION'.\n                            </Typography>\n                          </Grid>\n                          <Grid item xs={2}>\n                            <HelpToolPopover content={<HelpToolMapFineTuneSelection/>} />\n                          </Grid>\n                        </Grid>\n                        }\n                        {this.state.viewport.zoom >= 11 && ((!this.state.lon || !this.state.lat) || this.state.selectionConfirmed) &&\n                        <Grid item container direction=\"row\" justify=\"space-evenly\" alignItems=\"flex-start\">\n                          <Button\n                            variant=\"contained\" color=\"primary\" size=\"large\"\n                            onClick={() => this.handleViewportChange({'zoom':10})}\n                          >\n                            View Regional Forecast\n                          </Button>\n                        </Grid>\n                        }\n                        <Grid item>\n                          <div className={classes.wrapper}>\n                            { this.state.variable && this.state.date &&\n                              <MapDisplay\n                                lon={this.state.lon}\n                                lat={this.state.lat}\n                                locationText={this.state.locationText}\n                                selectionConfirmed={this.state.selectionConfirmed}\n                                viewport={this.state.viewport}\n                                variable={this.state.variable}\n                                date={this.state.date}\n                                dateFcstInit={this.state.dates[0]}\n                                initLocation={this.initLocation}\n                                handlePointChange={this.handlePointChange}\n                                handleSelectionConfirmed={this.handleSelectionConfirmed}\n                                handleViewportChange={this.handleViewportChange}\n                                handleGeocoderLocationChange={this.handleGeocoderLocationChange}\n                              />\n                            }\n                          </div>\n                        </Grid>\n                      </Grid>\n\n                  </Grid>\n            </div>\n        );\n\n    }\n}\n\n//StationExplorer.propTypes = {\n//  classes: PropTypes.object.isRequired,\n//};\n\nexport default withStyles(styles)(ToolContents);\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport Grid from '@material-ui/core/Grid'\nimport { withStyles } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport classNames from 'classnames'\n//import Link from 'next/link'\nimport React, { Component } from 'react'\n//import InvertedButton from './InvertedButton'\n//import Button from '@material-ui/core/Button';\nimport blue from '@material-ui/core/colors/blue';\n\n//import acislogo from '../../assets/acis-transparent.png'\n//import aiheclogo from '../../assets/AIHEC-Logo.png'\n//import nrcslogo from '../../assets/NRCS-Logo.png'\n\nclass Footer extends Component {\n  render () {\n    const { classes } = this.props\n    const currentYear = new Date().getFullYear()\n    return (\n      <div className={classes.root}>\n        <Grid\n          container\n          spacing={2}\n          className={classNames(classes.footerText, classes.footerSections)}\n        >\n          <Grid item xs={12} sm={3}>\n                        <Typography className={classes.white} gutterBottom variant=\"body2\">\n                            This site is a collaboration between the following partners/supporters.\n                        </Typography>\n          </Grid>\n        </Grid>\n        <Grid className={classes.subFooter} item xs={12}>\n          <Typography\n            className={classes.white}\n            variant=\"subtitle1\"\n            component={'span'}\n          >\n            © {currentYear} Cornell University\n          </Typography>\n        </Grid>\n      </div>\n    )\n  }\n}\n\nconst styles = theme => ({\n  root: {\n    //boxShadow: '0 50vh 0 50vh '+theme.palette.primary[800],\n    boxShadow: '0 50vh 0 50vh '+blue[800],\n    marginTop: 30,\n    //backgroundColor: `${theme.palette.primary[800]}`,\n    backgroundColor: blue[800],\n    borderTop: 'solid 3px #999999',\n    paddingTop: '16px',\n    overflowX: 'hidden'\n  },\n  footerSections: {\n    margin: '0 16px'\n  },\n  subFooter: {\n    //backgroundColor: 'rgba(0, 0, 0, 0.15)',\n    padding: '8px 16px 8px 16px',\n    marginTop: '8px'\n  },\n  footerText: {\n    color: '#fff',\n    fontSize: '18px',\n    lineHeight: 1.5\n  },\n  invertedBtnDark: {\n    color: '#fff',\n    backgroundColor: 'transparent',\n    border: '2px #fff solid',\n    boxShadow: 'none',\n    margin: '8px'\n  },\n  white: {\n    color: '#ffffff'\n  },\n  flexContainer: {\n    display: 'flex'\n  }\n})\n\nexport default withStyles(styles)(Footer)\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport React, { Component } from 'react';\n//import { inject, observer} from 'mobx-react';\nimport { MuiThemeProvider, createMuiTheme, withStyles, withTheme  } from \"@material-ui/core/styles\";\nimport blue from '@material-ui/core/colors/blue';\n\n// import route Components here\nimport {\n  BrowserRouter as Router,\n  Route,\n  //Link,\n  Switch,\n  Redirect\n} from 'react-router-dom'\n\n// Components\nimport Header from '../components/Header';\nimport AboutContents from '../components/AboutContents';\nimport HowtoContents from '../components/HowtoContents';\nimport Disclaimer from '../components/Disclaimer';\nimport ToolContents from '../components/ToolContents';\n//import MapDisplay from '../components/MapDisplay';\nimport Footer from '../components/Footer';\n\n// Styles\nimport '../styles/App.css';\n\nconst theme = createMuiTheme({\n  //shadows: [\"none\"],\n  shadows: Array(25).fill('none'),\n  palette: {\n    primary: {\n        main: blue[800]\n    },\n    alternativeTextColor: blue[800],\n  },\n  overrides: {\n    MUIDataTableBodyRow: {\n      root: {\n        '&:nth-child(odd)': {\n          backgroundColor: '#D3D3D3'\n        }\n      }\n    },\n  },\n  typography: {\n    body2: {\n      fontSize: '0.8rem',\n      '@media (min-width:960px)': {\n        fontSize: '1.0rem',\n      },\n    },\n  }\n});\n\nconst styles = theme => ({\n  root: {},\n  toolbar: theme.mixins.toolbar\n});\n\n//var app;\n\n//@inject('store') @observer\nclass App extends Component {\n\n    //constructor(props) {\n    //    super(props);\n    //    app = this.props.store.app;\n    //}\n\n    render() {\n\n        return (\n          <Router basename={process.env.PUBLIC_URL}>\n            <MuiThemeProvider theme={theme}>\n              <div id=\"container\" className=\"App\">\n                <Header />\n                <br/>\n                <Disclaimer />\n                <br/>\n\n                <div id=\"main-content\">\n                <Switch>\n                  <Route exact path=\"/\" render={(props) => <ToolContents {...props} />} />\n                  <Route exact path=\"/forecasts\" render={(props) => <ToolContents {...props} />} />\n                  <Route path=\"/howto\" component={HowtoContents} />\n                  <Route path=\"/about\" component={AboutContents} />\n                  <Route render={() => <Redirect to=\"/\" />} />\n                </Switch>\n                </div>\n\n                <Footer />\n              </div>\n            </MuiThemeProvider>\n          </Router>\n        );\n\n    }\n}\n\nexport default withStyles(styles)(withTheme(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n//Components\nimport App from './components/App';\n\n//Styles\n//import './styles/index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}